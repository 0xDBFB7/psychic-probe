ARM GAS  /tmp/ccZRAhSM.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ADC_Disable,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	ADC_Disable:
  23              	.LFB58:
  24              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @file    stm32f0xx_hal_adc.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          "stm32f0xx_hal_adc_ex.c".
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   [..]
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
ARM GAS  /tmp/ccZRAhSM.s 			page 2


  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC calibration
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       slower speed.
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### How to use this driver #####
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Enable the ADC interface
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            Caution: On STM32F0, ADC clock frequency max is 14MHz (refer
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     to device datasheet).
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     this maximum frequency.
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    14MHz.
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSI14State" must be set either:
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ADC_CONTROL" to let the ADC control 
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      the HSI14 oscillator enable/disable (if not used to supply the main 
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      system clock): feature used if ADC mode LowPowerAutoPowerOff is 
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      enabled.
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ON" to maintain the HSI14 oscillator
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                         (mandatory)
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                HI14 enable or let under control of ADC:           (optional: if asynchronous clock 
ARM GAS  /tmp/ccZRAhSM.s 			page 3


  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_ADC_CONTROL;
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ADCx_IRQHandler().
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ================================================================
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_Init().
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         monitored, thresholds, ...)
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ====================================
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         conversion accuracy
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
ARM GAS  /tmp/ccZRAhSM.s 			page 4


 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         transfer by DMA.
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by polling:
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (this function must be implemented in user program)
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 destination variable address.
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Disable the ADC interface
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock disable
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
ARM GAS  /tmp/ccZRAhSM.s 			page 5


 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Deinitialize the DMA
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     @endverbatim
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @attention
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      without specific prior written permission.
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************  
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #include "stm32f0xx_hal.h"
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @addtogroup STM32F0xx_HAL_Driver
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC ADC
ARM GAS  /tmp/ccZRAhSM.s 			page 6


 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief ADC HAL module driver
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* settling time.                                                           */
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clock frequency,       */
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: ms                                                                 */
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT             ( 2U)
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT            ( 2U)
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STOP_CONVERSION_TIMEOUT    ( 2U)
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ( 1U)
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
ARM GAS  /tmp/ccZRAhSM.s 			page 7


 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim    
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) De-initialize the ADC
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         depending on both possible clock sources: APB clock of HSI clock.
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     return HAL_ERROR;
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
ARM GAS  /tmp/ccZRAhSM.s 			page 8


 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Initialize ADC error code */
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the low level hardware */
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */ 
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on the fly).                                                             */
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock mode                                                      */
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock prescaler                                                 */
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC resolution                                                      */
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_IS_ENABLE(hadc) == RESET)
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameters):                                                         */
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
ARM GAS  /tmp/ccZRAhSM.s 			page 9


 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC resolution                                      */
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.Resolution );
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC clock mode: clock source AHB or HSI with        */
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* selectable prescaler                                                 */
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2    ,
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.ClockPrescaler );
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - overrun                                                             */
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - data alignment                                                      */
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - resolution                                                          */
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - scan direction                                                      */
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTDLY  |
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_CONT    |
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_OVRMOD  |
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTSEL  |
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTEN   |
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_ALIGN   |
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_SCANDIR |
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_DMACFG   );
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Enable the selected ADC group regular discontinuous mode */
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         tmpCFGR1 |= ADC_CFGR1_DISCEN;
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                  */
ARM GAS  /tmp/ccZRAhSM.s 			page 10


 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* start.                                                                 */
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       software start.                                                  */
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC configuration register with previous settings */
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= tmpCFGR1;
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Channel sampling time configuration */
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (obsolete): sampling time set in this function if parameter            */
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Otherwise, sampling time is set into ADC channel initialization        */
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* structure with parameter "SamplingTime" (obsolete).                    */
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear the old sample time */
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the new sample time */
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check through register CFGR1 (excluding analog watchdog configuration: */
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* set into separate dedicated function, and bits of ADC resolution set   */
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* out of temporary variable 'tmpCFGR1').                                 */
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to none */
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the ADC state */
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccZRAhSM.s 			page 11


 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         common group is still running.
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      return HAL_ERROR;
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
ARM GAS  /tmp/ccZRAhSM.s 			page 12


 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Change ADC state */
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register IER */
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOSMP | ADC_IT_RDY   ) );
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register ISR */
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOSMP | ADC_FLAG_RDY   ) );
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CR */
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* "read-set": no direct reset applicable.                                */
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR1 */
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN              
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR2 */
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       already done above.                                              */
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register SMPR */
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register TR1 */
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CHSELR */
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL11 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL9  | ADC_
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL7  | ADC_CHSELR_CHSEL6  | ADC_CHSELR_CHSEL5  | ADC_
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL3  | ADC_CHSELR_CHSEL2  | ADC_CHSELR_CHSEL1  | ADC_
ARM GAS  /tmp/ccZRAhSM.s 			page 13


 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register DR */
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CCR */
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC->CCR &= ~(ADC_CCR_ALL);
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*                                                                        */
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* DeInit the low level hardware */
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC error code to none */
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccZRAhSM.s 			page 14


 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    IO operation functions 
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       ##### IO operation functions #####
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group.
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion event.
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccZRAhSM.s 			page 15


 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** { 
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/ccZRAhSM.s 			page 16


 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC;
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence */
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
ARM GAS  /tmp/ccZRAhSM.s 			page 17


 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of each conversion */
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* each conversion:                                                       */
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update ADC state machine */
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
ARM GAS  /tmp/ccZRAhSM.s 			page 18


 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC state */
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Change ADC state to error state */
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Poll for conversion event.
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  EventType the ADC event type.
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          This parameter can be one of the following values:
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
ARM GAS  /tmp/ccZRAhSM.s 			page 19


1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();   
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check selected event flag */
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   switch(EventType)
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Overrun event */
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* considered as an error.                                                */
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
ARM GAS  /tmp/ccZRAhSM.s 			page 20


1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - EOC (end of conversion of regular group) or EOS (end of 
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence of regular group) depending on ADC initialization 
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            parameter "EOCSelection"
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun (if available)
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
ARM GAS  /tmp/ccZRAhSM.s 			page 21


1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         default:
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable interruption of 
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
ARM GAS  /tmp/ccZRAhSM.s 			page 22


1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         through DMA.
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA transfer complete
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA half transfer
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
ARM GAS  /tmp/ccZRAhSM.s 			page 23


1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA error callback */
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Start the DMA channel */
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccZRAhSM.s 			page 24


1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC DMA transfer, disable 
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC peripheral.
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {  
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_Disable(hadc);
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/ccZRAhSM.s 			page 25


1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            to flag EOC.
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         To clear this flag, either use function: 
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC converted value */ 
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->Instance->DR;
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Handles ADC interrupt request.  
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
ARM GAS  /tmp/ccZRAhSM.s 			page 26


1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
ARM GAS  /tmp/ccZRAhSM.s 			page 27


1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Level out of window callback */ 
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* error.                                                                 */
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Error callback */ 
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the Overrun flag */
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
ARM GAS  /tmp/ccZRAhSM.s 			page 28


1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
ARM GAS  /tmp/ccZRAhSM.s 			page 29


1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure channels on regular group
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure the analog watchdog
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         group.
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         VrefInt/Vbat/TempSensor.
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         setting).
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         TS_vbat, TS_temp (values rough order: 5us to 17us).
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel for regular group.
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
ARM GAS  /tmp/ccZRAhSM.s 			page 30


1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel number                                                        */
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel sampling time                                                 */
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC conversion sequencer.                                              */
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (sConfig->Rank != ADC_RANK_NONE)
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the channel selection register from the selected channel */
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (obsolete): sampling time set in this function with                  */
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameter "SamplingTime" (obsolete) only if not already set into     */
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADC initialization structure with parameter "SamplingTimeCommon".    */
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Modify sampling time if needed (not needed in case of reoccurrence */
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* for several channels programmed consecutively into the sequencer)  */
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Channel sampling time configuration */
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Clear the old sample time */
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set the new sample time */
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path. */
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, enable VREFINT measurement path. */
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, enable VBAT measurement path. */
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Temp. sensor is selected, wait for stabilization delay */
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             wait_loop_index--;
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
ARM GAS  /tmp/ccZRAhSM.s 			page 31


1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset the channel selection register from the selected channel */
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths disable: If internal channel selected,    */
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* disable dedicated internal buffers and path.                         */
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, disable Temp. sensor measurement path. */
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, disable VREFINT measurement path. */
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, disable VBAT measurement path. */
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* parameters.                                                              */
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, following  
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without reseting 
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
ARM GAS  /tmp/ccZRAhSM.s 			page 32


1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                      */
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the analog watchdog enable mode: one or overall group of        */
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    channels.                                                           */
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog            */
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDCH   );
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds*/
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set the high and low thresholds */
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* or HAL_ADC_PollForEvent().                                             */
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccZRAhSM.s 			page 33


1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral State functions
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     peripheral.
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC state
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC error code
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC state
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
ARM GAS  /tmp/ccZRAhSM.s 			page 34


1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         compared with states bits.
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For example:                                                         
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL state
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->State;
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC error code
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC Error Code
1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */  
1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed automatically by hardware.
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
ARM GAS  /tmp/ccZRAhSM.s 			page 35


1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       wait_loop_index--;
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }   
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped.
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
ARM GAS  /tmp/ccZRAhSM.s 			page 36


1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
  25              		.loc 1 1976 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       disabled.                                                          */
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
  30              		.loc 1 1982 0
  31 0000 0321     		movs	r1, #3
  32 0002 0368     		ldr	r3, [r0]
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
  33              		.loc 1 1976 0
  34 0004 70B5     		push	{r4, r5, r6, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
  41              		.loc 1 1982 0
  42 0006 9A68     		ldr	r2, [r3, #8]
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
  43              		.loc 1 1976 0
  44 0008 0400     		movs	r4, r0
  45              		.loc 1 1982 0
  46 000a 0A40     		ands	r2, r1
  47 000c 012A     		cmp	r2, #1
  48 000e 01D0     		beq	.L2
  49              	.LVL1:
  50              	.L5:
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
ARM GAS  /tmp/ccZRAhSM.s 			page 37


2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
  51              		.loc 1 2021 0
  52 0010 0020     		movs	r0, #0
  53              	.L11:
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
  54              		.loc 1 2022 0
  55              		@ sp needed
  56              	.LVL2:
  57 0012 70BD     		pop	{r4, r5, r6, pc}
  58              	.LVL3:
  59              	.L2:
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
  60              		.loc 1 1982 0 discriminator 1
  61 0014 1968     		ldr	r1, [r3]
  62 0016 1142     		tst	r1, r2
  63 0018 02D1     		bne	.L4
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
  64              		.loc 1 1982 0 is_stmt 0 discriminator 4
  65 001a DA68     		ldr	r2, [r3, #12]
  66 001c 1204     		lsls	r2, r2, #16
  67 001e F7D5     		bpl	.L5
  68              	.L4:
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
  69              		.loc 1 1985 0 is_stmt 1
  70 0020 0522     		movs	r2, #5
  71 0022 9D68     		ldr	r5, [r3, #8]
  72 0024 1540     		ands	r5, r2
  73 0026 012D     		cmp	r5, #1
  74 0028 1AD1     		bne	.L12
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
  75              		.loc 1 1988 0
  76 002a 0222     		movs	r2, #2
  77 002c 9968     		ldr	r1, [r3, #8]
  78 002e 0A43     		orrs	r2, r1
  79 0030 9A60     		str	r2, [r3, #8]
  80 0032 0322     		movs	r2, #3
  81 0034 1A60     		str	r2, [r3]
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccZRAhSM.s 			page 38


  82              		.loc 1 2003 0
  83 0036 FFF7FEFF 		bl	HAL_GetTick
  84              	.LVL4:
  85 003a 0600     		movs	r6, r0
  86              	.LVL5:
  87              	.L6:
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
  88              		.loc 1 2005 0
  89 003c 2368     		ldr	r3, [r4]
  90 003e 9B68     		ldr	r3, [r3, #8]
  91 0040 2B42     		tst	r3, r5
  92 0042 E5D0     		beq	.L5
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
  93              		.loc 1 2007 0
  94 0044 FFF7FEFF 		bl	HAL_GetTick
  95              	.LVL6:
  96 0048 801B     		subs	r0, r0, r6
  97 004a 0228     		cmp	r0, #2
  98 004c F6D9     		bls	.L6
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
  99              		.loc 1 2010 0
 100 004e 1023     		movs	r3, #16
 101 0050 626C     		ldr	r2, [r4, #68]
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 102              		.loc 1 2015 0
 103 0052 0120     		movs	r0, #1
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 104              		.loc 1 2010 0
 105 0054 1343     		orrs	r3, r2
 106 0056 6364     		str	r3, [r4, #68]
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 107              		.loc 1 2013 0
 108 0058 A36C     		ldr	r3, [r4, #72]
 109 005a 1D43     		orrs	r5, r3
 110 005c A564     		str	r5, [r4, #72]
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 111              		.loc 1 2015 0
 112 005e D8E7     		b	.L11
 113              	.LVL7:
 114              	.L12:
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 115              		.loc 1 1993 0
 116 0060 1023     		movs	r3, #16
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 117              		.loc 1 1996 0
 118 0062 0120     		movs	r0, #1
 119              	.LVL8:
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 120              		.loc 1 1993 0
 121 0064 626C     		ldr	r2, [r4, #68]
 122 0066 1343     		orrs	r3, r2
 123 0068 6364     		str	r3, [r4, #68]
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 124              		.loc 1 1996 0
 125 006a A36C     		ldr	r3, [r4, #72]
 126 006c 0343     		orrs	r3, r0
 127 006e A364     		str	r3, [r4, #72]
ARM GAS  /tmp/ccZRAhSM.s 			page 39


1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 128              		.loc 1 1998 0
 129 0070 CFE7     		b	.L11
 130              		.cfi_endproc
 131              	.LFE58:
 133              		.global	__aeabi_uidiv
 134              		.section	.text.ADC_Enable,"ax",%progbits
 135              		.align	1
 136              		.syntax unified
 137              		.code	16
 138              		.thumb_func
 139              		.fpu softvfp
 141              	ADC_Enable:
 142              	.LFB57:
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 143              		.loc 1 1911 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 8
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              	.LVL9:
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 148              		.loc 1 1913 0
 149 0000 0023     		movs	r3, #0
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 150              		.loc 1 1911 0
 151 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 152              	.LCFI1:
 153              		.cfi_def_cfa_offset 24
 154              		.cfi_offset 0, -24
 155              		.cfi_offset 1, -20
 156              		.cfi_offset 4, -16
 157              		.cfi_offset 5, -12
 158              		.cfi_offset 6, -8
 159              		.cfi_offset 14, -4
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 160              		.loc 1 1919 0
 161 0004 0321     		movs	r1, #3
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 162              		.loc 1 1913 0
 163 0006 0193     		str	r3, [sp, #4]
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 164              		.loc 1 1919 0
 165 0008 0368     		ldr	r3, [r0]
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 166              		.loc 1 1911 0
 167 000a 0400     		movs	r4, r0
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 168              		.loc 1 1919 0
 169 000c 9A68     		ldr	r2, [r3, #8]
 170 000e 0A40     		ands	r2, r1
 171 0010 012A     		cmp	r2, #1
 172 0012 07D1     		bne	.L14
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 173              		.loc 1 1919 0 is_stmt 0 discriminator 1
 174 0014 1968     		ldr	r1, [r3]
 175 0016 1142     		tst	r1, r2
 176 0018 01D0     		beq	.L15
ARM GAS  /tmp/ccZRAhSM.s 			page 40


 177              	.LVL10:
 178              	.L17:
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 179              		.loc 1 1965 0 is_stmt 1
 180 001a 0020     		movs	r0, #0
 181              	.L25:
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 182              		.loc 1 1966 0
 183              		@ sp needed
 184              	.LVL11:
 185 001c 76BD     		pop	{r1, r2, r4, r5, r6, pc}
 186              	.LVL12:
 187              	.L15:
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 188              		.loc 1 1919 0 discriminator 4
 189 001e DA68     		ldr	r2, [r3, #12]
 190 0020 1204     		lsls	r2, r2, #16
 191 0022 FAD4     		bmi	.L17
 192              	.L14:
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 193              		.loc 1 1922 0
 194 0024 9968     		ldr	r1, [r3, #8]
 195 0026 194A     		ldr	r2, .L27
 196 0028 1142     		tst	r1, r2
 197 002a 08D0     		beq	.L26
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 198              		.loc 1 1925 0
 199 002c 1023     		movs	r3, #16
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 200              		.loc 1 1928 0
 201 002e 0120     		movs	r0, #1
 202              	.LVL13:
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 203              		.loc 1 1925 0
 204 0030 626C     		ldr	r2, [r4, #68]
 205 0032 1343     		orrs	r3, r2
 206 0034 6364     		str	r3, [r4, #68]
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 207              		.loc 1 1928 0
 208 0036 A36C     		ldr	r3, [r4, #72]
 209 0038 0343     		orrs	r3, r0
 210 003a A364     		str	r3, [r4, #72]
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 211              		.loc 1 1930 0
 212 003c EEE7     		b	.L25
 213              	.LVL14:
 214              	.L26:
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 215              		.loc 1 1934 0
 216 003e 0122     		movs	r2, #1
 217 0040 9968     		ldr	r1, [r3, #8]
 218 0042 0A43     		orrs	r2, r1
 219 0044 9A60     		str	r2, [r3, #8]
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 220              		.loc 1 1938 0
 221 0046 124B     		ldr	r3, .L27+4
 222 0048 1249     		ldr	r1, .L27+8
ARM GAS  /tmp/ccZRAhSM.s 			page 41


 223 004a 1868     		ldr	r0, [r3]
 224              	.LVL15:
 225 004c FFF7FEFF 		bl	__aeabi_uidiv
 226              	.LVL16:
 227 0050 0190     		str	r0, [sp, #4]
 228              	.L18:
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 229              		.loc 1 1939 0
 230 0052 019B     		ldr	r3, [sp, #4]
 231 0054 002B     		cmp	r3, #0
 232 0056 15D1     		bne	.L19
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 233              		.loc 1 1945 0
 234 0058 FFF7FEFF 		bl	HAL_GetTick
 235              	.LVL17:
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 236              		.loc 1 1948 0
 237 005c 0125     		movs	r5, #1
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 238              		.loc 1 1945 0
 239 005e 0600     		movs	r6, r0
 240              	.LVL18:
 241              	.L20:
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 242              		.loc 1 1948 0
 243 0060 2368     		ldr	r3, [r4]
 244 0062 1B68     		ldr	r3, [r3]
 245 0064 2B42     		tst	r3, r5
 246 0066 D8D1     		bne	.L17
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 247              		.loc 1 1950 0
 248 0068 FFF7FEFF 		bl	HAL_GetTick
 249              	.LVL19:
 250 006c 801B     		subs	r0, r0, r6
 251 006e 0228     		cmp	r0, #2
 252 0070 F6D9     		bls	.L20
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 253              		.loc 1 1953 0
 254 0072 1023     		movs	r3, #16
 255 0074 626C     		ldr	r2, [r4, #68]
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 256              		.loc 1 1958 0
 257 0076 0120     		movs	r0, #1
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 258              		.loc 1 1953 0
 259 0078 1343     		orrs	r3, r2
 260 007a 6364     		str	r3, [r4, #68]
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 261              		.loc 1 1956 0
 262 007c A36C     		ldr	r3, [r4, #72]
 263 007e 2B43     		orrs	r3, r5
 264 0080 A364     		str	r3, [r4, #72]
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 265              		.loc 1 1958 0
 266 0082 CBE7     		b	.L25
 267              	.LVL20:
 268              	.L19:
ARM GAS  /tmp/ccZRAhSM.s 			page 42


1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 269              		.loc 1 1941 0
 270 0084 019B     		ldr	r3, [sp, #4]
 271 0086 013B     		subs	r3, r3, #1
 272 0088 0193     		str	r3, [sp, #4]
 273 008a E2E7     		b	.L18
 274              	.L28:
 275              		.align	2
 276              	.L27:
 277 008c 17000080 		.word	-2147483625
 278 0090 00000000 		.word	SystemCoreClock
 279 0094 40420F00 		.word	1000000
 280              		.cfi_endproc
 281              	.LFE57:
 283              		.section	.text.ADC_ConversionStop,"ax",%progbits
 284              		.align	1
 285              		.syntax unified
 286              		.code	16
 287              		.thumb_func
 288              		.fpu softvfp
 290              	ADC_ConversionStop:
 291              	.LFB59:
2023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped to disable the ADC.
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
2031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 292              		.loc 1 2033 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL21:
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* this function if not needed.                                             */
2041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 297              		.loc 1 2041 0
 298 0000 0422     		movs	r2, #4
 299 0002 0368     		ldr	r3, [r0]
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 300              		.loc 1 2033 0
 301 0004 70B5     		push	{r4, r5, r6, lr}
 302              	.LCFI2:
 303              		.cfi_def_cfa_offset 16
 304              		.cfi_offset 4, -16
 305              		.cfi_offset 5, -12
 306              		.cfi_offset 6, -8
ARM GAS  /tmp/ccZRAhSM.s 			page 43


 307              		.cfi_offset 14, -4
 308              		.loc 1 2041 0
 309 0006 9968     		ldr	r1, [r3, #8]
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 310              		.loc 1 2033 0
 311 0008 0400     		movs	r4, r0
 312              		.loc 1 2041 0
 313 000a 1142     		tst	r1, r2
 314 000c 01D1     		bne	.L30
 315              	.LVL22:
 316              	.L35:
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
2048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Stop conversions on regular group */
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
2051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
2058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
2068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
2073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 317              		.loc 1 2074 0
 318 000e 0020     		movs	r0, #0
 319              	.L31:
2075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 320              		.loc 1 2075 0
 321              		@ sp needed
 322              	.LVL23:
 323 0010 70BD     		pop	{r4, r5, r6, pc}
 324              	.LVL24:
 325              	.L30:
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 326              		.loc 1 2046 0
 327 0012 9968     		ldr	r1, [r3, #8]
ARM GAS  /tmp/ccZRAhSM.s 			page 44


 328 0014 1142     		tst	r1, r2
 329 0016 06D0     		beq	.L32
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 330              		.loc 1 2047 0 discriminator 1
 331 0018 9A68     		ldr	r2, [r3, #8]
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 332              		.loc 1 2046 0 discriminator 1
 333 001a 9207     		lsls	r2, r2, #30
 334 001c 03D4     		bmi	.L32
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 335              		.loc 1 2050 0
 336 001e 1022     		movs	r2, #16
 337 0020 9968     		ldr	r1, [r3, #8]
 338 0022 0A43     		orrs	r2, r1
 339 0024 9A60     		str	r2, [r3, #8]
 340              	.L32:
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 341              		.loc 1 2055 0
 342 0026 FFF7FEFF 		bl	HAL_GetTick
 343              	.LVL25:
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 344              		.loc 1 2057 0
 345 002a 0425     		movs	r5, #4
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 346              		.loc 1 2055 0
 347 002c 0600     		movs	r6, r0
 348              	.LVL26:
 349              	.L33:
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 350              		.loc 1 2057 0
 351 002e 2368     		ldr	r3, [r4]
 352 0030 9B68     		ldr	r3, [r3, #8]
 353 0032 2B42     		tst	r3, r5
 354 0034 EBD0     		beq	.L35
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 355              		.loc 1 2059 0
 356 0036 FFF7FEFF 		bl	HAL_GetTick
 357              	.LVL27:
 358 003a 801B     		subs	r0, r0, r6
 359 003c 0228     		cmp	r0, #2
 360 003e F6D9     		bls	.L33
 361              	.LVL28:
 362              	.LBB4:
 363              	.LBB5:
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 364              		.loc 1 2062 0
 365 0040 1023     		movs	r3, #16
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 366              		.loc 1 2065 0
 367 0042 0120     		movs	r0, #1
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 368              		.loc 1 2062 0
 369 0044 626C     		ldr	r2, [r4, #68]
 370 0046 1343     		orrs	r3, r2
 371 0048 6364     		str	r3, [r4, #68]
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 372              		.loc 1 2065 0
ARM GAS  /tmp/ccZRAhSM.s 			page 45


 373 004a A36C     		ldr	r3, [r4, #72]
 374 004c 0343     		orrs	r3, r0
 375 004e A364     		str	r3, [r4, #72]
 376              	.LVL29:
 377 0050 DEE7     		b	.L31
 378              	.LBE5:
 379              	.LBE4:
 380              		.cfi_endproc
 381              	.LFE59:
 383              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 384              		.align	1
 385              		.weak	HAL_ADC_MspInit
 386              		.syntax unified
 387              		.code	16
 388              		.thumb_func
 389              		.fpu softvfp
 391              	HAL_ADC_MspInit:
 392              	.LFB73:
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397              		@ sp needed
 398 0000 7047     		bx	lr
 399              		.cfi_endproc
 400              	.LFE73:
 402              		.section	.text.HAL_ADC_Init,"ax",%progbits
 403              		.align	1
 404              		.global	HAL_ADC_Init
 405              		.syntax unified
 406              		.code	16
 407              		.thumb_func
 408              		.fpu softvfp
 410              	HAL_ADC_Init:
 411              	.LFB35:
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 412              		.loc 1 360 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              	.LVL30:
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 417              		.loc 1 360 0
 418 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 419              	.LCFI3:
 420              		.cfi_def_cfa_offset 24
 421              		.cfi_offset 3, -24
 422              		.cfi_offset 4, -20
 423              		.cfi_offset 5, -16
 424              		.cfi_offset 6, -12
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 427              		.loc 1 360 0
 428 0002 0400     		movs	r4, r0
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 429              		.loc 1 367 0
ARM GAS  /tmp/ccZRAhSM.s 			page 46


 430 0004 0120     		movs	r0, #1
 431              	.LVL31:
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 432              		.loc 1 365 0
 433 0006 002C     		cmp	r4, #0
 434 0008 72D0     		beq	.L61
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 435              		.loc 1 394 0
 436 000a 636C     		ldr	r3, [r4, #68]
 437 000c 002B     		cmp	r3, #0
 438 000e 06D1     		bne	.L43
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 439              		.loc 1 400 0
 440 0010 2200     		movs	r2, r4
 441 0012 4032     		adds	r2, r2, #64
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 442              		.loc 1 397 0
 443 0014 A364     		str	r3, [r4, #72]
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 444              		.loc 1 403 0
 445 0016 2000     		movs	r0, r4
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 446              		.loc 1 400 0
 447 0018 1370     		strb	r3, [r2]
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 448              		.loc 1 403 0
 449 001a FFF7FEFF 		bl	HAL_ADC_MspInit
 450              	.LVL32:
 451              	.L43:
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 452              		.loc 1 411 0
 453 001e 636C     		ldr	r3, [r4, #68]
 454 0020 DB06     		lsls	r3, r3, #27
 455 0022 00D5     		bpl	.LCB376
 456 0024 79E0     		b	.L44	@long jump
 457              	.LCB376:
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 458              		.loc 1 413 0
 459 0026 0422     		movs	r2, #4
 460 0028 2368     		ldr	r3, [r4]
 461 002a 9868     		ldr	r0, [r3, #8]
 462 002c 1040     		ands	r0, r2
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 463              		.loc 1 412 0
 464 002e 00D0     		beq	.LCB382
 465 0030 73E0     		b	.L44	@long jump
 466              	.LCB382:
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 467              		.loc 1 416 0
 468 0032 626C     		ldr	r2, [r4, #68]
 469 0034 4249     		ldr	r1, .L62
 470 0036 1140     		ands	r1, r2
 471 0038 0222     		movs	r2, #2
 472 003a 0A43     		orrs	r2, r1
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 473              		.loc 1 425 0
 474 003c 0321     		movs	r1, #3
ARM GAS  /tmp/ccZRAhSM.s 			page 47


 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 475              		.loc 1 416 0
 476 003e 6264     		str	r2, [r4, #68]
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 477              		.loc 1 425 0
 478 0040 9A68     		ldr	r2, [r3, #8]
 479 0042 0A40     		ands	r2, r1
 480 0044 012A     		cmp	r2, #1
 481 0046 00D0     		beq	.LCB393
 482 0048 6DE0     		b	.L45	@long jump
 483              	.LCB393:
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 484              		.loc 1 425 0 is_stmt 0 discriminator 1
 485 004a 1968     		ldr	r1, [r3]
 486 004c 1142     		tst	r1, r2
 487 004e 02D1     		bne	.L46
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 488              		.loc 1 425 0 discriminator 4
 489 0050 DA68     		ldr	r2, [r3, #12]
 490 0052 1204     		lsls	r2, r2, #16
 491 0054 67D5     		bpl	.L45
 492              	.L46:
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 493              		.loc 1 459 0 is_stmt 1
 494 0056 DA68     		ldr	r2, [r3, #12]
 495 0058 3A49     		ldr	r1, .L62+4
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 496              		.loc 1 472 0
 497 005a 256A     		ldr	r5, [r4, #32]
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 498              		.loc 1 459 0
 499 005c 0A40     		ands	r2, r1
 500 005e DA60     		str	r2, [r3, #12]
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 501              		.loc 1 470 0
 502 0060 A269     		ldr	r2, [r4, #24]
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 503              		.loc 1 472 0
 504 0062 6F03     		lsls	r7, r5, #13
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 505              		.loc 1 470 0
 506 0064 9103     		lsls	r1, r2, #14
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 507              		.loc 1 471 0
 508 0066 E269     		ldr	r2, [r4, #28]
 509 0068 D203     		lsls	r2, r2, #15
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 510              		.loc 1 470 0
 511 006a 1143     		orrs	r1, r2
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 512              		.loc 1 473 0
 513 006c 626B     		ldr	r2, [r4, #52]
 514 006e 013A     		subs	r2, r2, #1
 515 0070 561E     		subs	r6, r2, #1
 516 0072 B241     		sbcs	r2, r2, r6
 517 0074 1603     		lsls	r6, r2, #12
 518 0076 E268     		ldr	r2, [r4, #12]
ARM GAS  /tmp/ccZRAhSM.s 			page 48


 519 0078 1143     		orrs	r1, r2
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 520              		.loc 1 475 0
 521 007a 2269     		ldr	r2, [r4, #16]
 522 007c 0F43     		orrs	r7, r1
 523 007e 022A     		cmp	r2, #2
 524 0080 00D1     		bne	.L48
 525 0082 0420     		movs	r0, #4
 526              	.L48:
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 527              		.loc 1 476 0
 528 0084 226B     		ldr	r2, [r4, #48]
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 529              		.loc 1 479 0
 530 0086 616A     		ldr	r1, [r4, #36]
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 531              		.loc 1 476 0
 532 0088 5200     		lsls	r2, r2, #1
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 533              		.loc 1 475 0
 534 008a 3A43     		orrs	r2, r7
 535 008c 3243     		orrs	r2, r6
 536 008e 0243     		orrs	r2, r0
 537              	.LVL33:
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 538              		.loc 1 479 0
 539 0090 0129     		cmp	r1, #1
 540 0092 04D1     		bne	.L49
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 541              		.loc 1 481 0
 542 0094 002D     		cmp	r5, #0
 543 0096 2CD1     		bne	.L50
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 544              		.loc 1 484 0
 545 0098 8021     		movs	r1, #128
 546 009a 4902     		lsls	r1, r1, #9
 547 009c 0A43     		orrs	r2, r1
 548              	.LVL34:
 549              	.L49:
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 550              		.loc 1 505 0
 551 009e C220     		movs	r0, #194
 552 00a0 A16A     		ldr	r1, [r4, #40]
 553 00a2 FF30     		adds	r0, r0, #255
 554 00a4 8142     		cmp	r1, r0
 555 00a6 02D0     		beq	.L51
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 556              		.loc 1 507 0
 557 00a8 E06A     		ldr	r0, [r4, #44]
 558 00aa 0143     		orrs	r1, r0
 559 00ac 0A43     		orrs	r2, r1
 560              	.LVL35:
 561              	.L51:
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 562              		.loc 1 520 0
 563 00ae 8020     		movs	r0, #128
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccZRAhSM.s 			page 49


 564              		.loc 1 512 0
 565 00b0 D968     		ldr	r1, [r3, #12]
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 566              		.loc 1 520 0
 567 00b2 4005     		lsls	r0, r0, #21
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 568              		.loc 1 512 0
 569 00b4 1143     		orrs	r1, r2
 570 00b6 D960     		str	r1, [r3, #12]
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 571              		.loc 1 520 0
 572 00b8 A16B     		ldr	r1, [r4, #56]
 573 00ba 8142     		cmp	r1, r0
 574 00bc 02D0     		beq	.L52
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 575              		.loc 1 520 0 is_stmt 0 discriminator 1
 576 00be 481E     		subs	r0, r1, #1
 577 00c0 0628     		cmp	r0, #6
 578 00c2 07D8     		bhi	.L53
 579              	.L52:
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 580              		.loc 1 524 0 is_stmt 1
 581 00c4 0725     		movs	r5, #7
 582 00c6 5869     		ldr	r0, [r3, #20]
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 583              		.loc 1 527 0
 584 00c8 2940     		ands	r1, r5
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 585              		.loc 1 524 0
 586 00ca A843     		bics	r0, r5
 587 00cc 5861     		str	r0, [r3, #20]
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 588              		.loc 1 527 0
 589 00ce 5869     		ldr	r0, [r3, #20]
 590 00d0 0143     		orrs	r1, r0
 591 00d2 5961     		str	r1, [r3, #20]
 592              	.L53:
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 593              		.loc 1 535 0
 594 00d4 DB68     		ldr	r3, [r3, #12]
 595 00d6 1C49     		ldr	r1, .L62+8
 596 00d8 0B40     		ands	r3, r1
 597 00da 9A42     		cmp	r2, r3
 598 00dc 11D1     		bne	.L54
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 599              		.loc 1 539 0
 600 00de 0020     		movs	r0, #0
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 601              		.loc 1 542 0
 602 00e0 0322     		movs	r2, #3
 603              	.LVL36:
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 604              		.loc 1 539 0
 605 00e2 A064     		str	r0, [r4, #72]
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 606              		.loc 1 542 0
 607 00e4 636C     		ldr	r3, [r4, #68]
ARM GAS  /tmp/ccZRAhSM.s 			page 50


 608 00e6 9343     		bics	r3, r2
 609 00e8 1A00     		movs	r2, r3
 610 00ea 0123     		movs	r3, #1
 611 00ec 1343     		orrs	r3, r2
 612 00ee 6364     		str	r3, [r4, #68]
 613              	.LVL37:
 614              	.L61:
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 615              		.loc 1 570 0
 616              		@ sp needed
 617              	.LVL38:
 618 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 619              	.LVL39:
 620              	.L50:
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 621              		.loc 1 493 0
 622 00f2 2020     		movs	r0, #32
 623 00f4 656C     		ldr	r5, [r4, #68]
 624 00f6 2843     		orrs	r0, r5
 625 00f8 6064     		str	r0, [r4, #68]
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 626              		.loc 1 496 0
 627 00fa A06C     		ldr	r0, [r4, #72]
 628 00fc 0143     		orrs	r1, r0
 629 00fe A164     		str	r1, [r4, #72]
 630 0100 CDE7     		b	.L49
 631              	.L54:
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 632              		.loc 1 549 0
 633 0102 1222     		movs	r2, #18
 634              	.LVL40:
 635 0104 636C     		ldr	r3, [r4, #68]
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 636              		.loc 1 554 0
 637 0106 0120     		movs	r0, #1
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 638              		.loc 1 549 0
 639 0108 9343     		bics	r3, r2
 640 010a 1A00     		movs	r2, r3
 641 010c 1023     		movs	r3, #16
 642 010e 1343     		orrs	r3, r2
 643 0110 6364     		str	r3, [r4, #68]
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 644              		.loc 1 554 0
 645 0112 A36C     		ldr	r3, [r4, #72]
 646 0114 0343     		orrs	r3, r0
 647 0116 A364     		str	r3, [r4, #72]
 648              	.LVL41:
 649 0118 EAE7     		b	.L61
 650              	.LVL42:
 651              	.L44:
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 652              		.loc 1 563 0
 653 011a 1023     		movs	r3, #16
 654 011c 626C     		ldr	r2, [r4, #68]
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 655              		.loc 1 565 0
ARM GAS  /tmp/ccZRAhSM.s 			page 51


 656 011e 0120     		movs	r0, #1
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 657              		.loc 1 563 0
 658 0120 1343     		orrs	r3, r2
 659 0122 6364     		str	r3, [r4, #68]
 660              	.LVL43:
 661 0124 E4E7     		b	.L61
 662              	.LVL44:
 663              	.L45:
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 664              		.loc 1 436 0
 665 0126 1821     		movs	r1, #24
 666 0128 DA68     		ldr	r2, [r3, #12]
 667 012a 8A43     		bics	r2, r1
 668 012c A168     		ldr	r1, [r4, #8]
 669 012e 0A43     		orrs	r2, r1
 670 0130 DA60     		str	r2, [r3, #12]
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 671              		.loc 1 442 0
 672 0132 1969     		ldr	r1, [r3, #16]
 673 0134 6268     		ldr	r2, [r4, #4]
 674 0136 8900     		lsls	r1, r1, #2
 675 0138 8908     		lsrs	r1, r1, #2
 676 013a 1143     		orrs	r1, r2
 677 013c 1961     		str	r1, [r3, #16]
 678 013e 8AE7     		b	.L46
 679              	.L63:
 680              		.align	2
 681              	.L62:
 682 0140 FDFEFFFF 		.word	-259
 683 0144 1902FEFF 		.word	-130535
 684 0148 E7FF3F83 		.word	-2092957721
 685              		.cfi_endproc
 686              	.LFE35:
 688              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 689              		.align	1
 690              		.weak	HAL_ADC_MspDeInit
 691              		.syntax unified
 692              		.code	16
 693              		.thumb_func
 694              		.fpu softvfp
 696              	HAL_ADC_MspDeInit:
 697              	.LFB71:
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              		@ link register save eliminated.
 702              		@ sp needed
 703 0000 7047     		bx	lr
 704              		.cfi_endproc
 705              	.LFE71:
 707              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 708              		.align	1
 709              		.global	HAL_ADC_DeInit
 710              		.syntax unified
 711              		.code	16
 712              		.thumb_func
ARM GAS  /tmp/ccZRAhSM.s 			page 52


 713              		.fpu softvfp
 715              	HAL_ADC_DeInit:
 716              	.LFB36:
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 717              		.loc 1 586 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              	.LVL45:
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 722              		.loc 1 586 0
 723 0000 70B5     		push	{r4, r5, r6, lr}
 724              	.LCFI4:
 725              		.cfi_def_cfa_offset 16
 726              		.cfi_offset 4, -16
 727              		.cfi_offset 5, -12
 728              		.cfi_offset 6, -8
 729              		.cfi_offset 14, -4
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 730              		.loc 1 586 0
 731 0002 0400     		movs	r4, r0
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 732              		.loc 1 592 0
 733 0004 0125     		movs	r5, #1
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 734              		.loc 1 590 0
 735 0006 0028     		cmp	r0, #0
 736 0008 11D0     		beq	.L66
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 737              		.loc 1 599 0
 738 000a 0223     		movs	r3, #2
 739 000c 426C     		ldr	r2, [r0, #68]
 740 000e 1343     		orrs	r3, r2
 741 0010 4364     		str	r3, [r0, #68]
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 742              		.loc 1 602 0
 743 0012 FFF7FEFF 		bl	ADC_ConversionStop
 744              	.LVL46:
 745 0016 051E     		subs	r5, r0, #0
 746              	.LVL47:
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 747              		.loc 1 605 0
 748 0018 33D1     		bne	.L67
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 749              		.loc 1 608 0
 750 001a 2000     		movs	r0, r4
 751              	.LVL48:
 752 001c FFF7FEFF 		bl	ADC_Disable
 753              	.LVL49:
 754 0020 0500     		movs	r5, r0
 755              	.LVL50:
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 756              		.loc 1 611 0
 757 0022 0128     		cmp	r0, #1
 758 0024 05D1     		bne	.L68
 759              	.LVL51:
 760              	.L71:
ARM GAS  /tmp/ccZRAhSM.s 			page 53


 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 761              		.loc 1 586 0
 762 0026 0125     		movs	r5, #1
 763              	.L69:
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 764              		.loc 1 689 0
 765 0028 0023     		movs	r3, #0
 766 002a 4034     		adds	r4, r4, #64
 767              	.LVL52:
 768 002c 2370     		strb	r3, [r4]
 769              	.LVL53:
 770              	.L66:
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 771              		.loc 1 693 0
 772 002e 2800     		movs	r0, r5
 773              		@ sp needed
 774 0030 70BD     		pop	{r4, r5, r6, pc}
 775              	.LVL54:
 776              	.L68:
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 777              		.loc 1 614 0
 778 0032 0123     		movs	r3, #1
 779 0034 6364     		str	r3, [r4, #68]
 780              	.LVL55:
 781              	.L70:
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 782              		.loc 1 626 0
 783 0036 9F21     		movs	r1, #159
 784 0038 2368     		ldr	r3, [r4]
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 785              		.loc 1 679 0
 786 003a 2000     		movs	r0, r4
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 787              		.loc 1 626 0
 788 003c 5A68     		ldr	r2, [r3, #4]
 789 003e 8A43     		bics	r2, r1
 790 0040 5A60     		str	r2, [r3, #4]
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 791              		.loc 1 631 0
 792 0042 1960     		str	r1, [r3]
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 793              		.loc 1 640 0
 794 0044 DA68     		ldr	r2, [r3, #12]
 795 0046 1049     		ldr	r1, .L76
 796 0048 0A40     		ands	r2, r1
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 797              		.loc 1 651 0
 798 004a 0721     		movs	r1, #7
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 799              		.loc 1 640 0
 800 004c DA60     		str	r2, [r3, #12]
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 801              		.loc 1 648 0
 802 004e 1A69     		ldr	r2, [r3, #16]
 803 0050 9200     		lsls	r2, r2, #2
 804 0052 9208     		lsrs	r2, r2, #2
 805 0054 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccZRAhSM.s 			page 54


 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 806              		.loc 1 651 0
 807 0056 5A69     		ldr	r2, [r3, #20]
 808 0058 8A43     		bics	r2, r1
 809 005a 5A61     		str	r2, [r3, #20]
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 810              		.loc 1 654 0
 811 005c 1A6A     		ldr	r2, [r3, #32]
 812 005e 0B49     		ldr	r1, .L76+4
 813 0060 0A40     		ands	r2, r1
 814 0062 1A62     		str	r2, [r3, #32]
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 815              		.loc 1 657 0
 816 0064 9A6A     		ldr	r2, [r3, #40]
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 817              		.loc 1 667 0
 818 0066 0A49     		ldr	r1, .L76+8
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 819              		.loc 1 657 0
 820 0068 D20C     		lsrs	r2, r2, #19
 821 006a D204     		lsls	r2, r2, #19
 822 006c 9A62     		str	r2, [r3, #40]
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 823              		.loc 1 667 0
 824 006e 094A     		ldr	r2, .L76+12
 825 0070 1368     		ldr	r3, [r2]
 826 0072 0B40     		ands	r3, r1
 827 0074 1360     		str	r3, [r2]
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 828              		.loc 1 679 0
 829 0076 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 830              	.LVL56:
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 831              		.loc 1 682 0
 832 007a 0023     		movs	r3, #0
 833 007c A364     		str	r3, [r4, #72]
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 834              		.loc 1 685 0
 835 007e 6364     		str	r3, [r4, #68]
 836 0080 D2E7     		b	.L69
 837              	.LVL57:
 838              	.L67:
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 839              		.loc 1 621 0
 840 0082 0128     		cmp	r0, #1
 841 0084 CFD0     		beq	.L71
 842 0086 D6E7     		b	.L70
 843              	.L77:
 844              		.align	2
 845              	.L76:
 846 0088 00023E83 		.word	-2093088256
 847 008c 00F000F0 		.word	-268374016
 848 0090 FFFF3FFF 		.word	-12582913
 849 0094 08270140 		.word	1073817352
 850              		.cfi_endproc
 851              	.LFE36:
 853              		.section	.text.HAL_ADC_Start,"ax",%progbits
ARM GAS  /tmp/ccZRAhSM.s 			page 55


 854              		.align	1
 855              		.global	HAL_ADC_Start
 856              		.syntax unified
 857              		.code	16
 858              		.thumb_func
 859              		.fpu softvfp
 861              	HAL_ADC_Start:
 862              	.LFB39:
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 863              		.loc 1 759 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              	.LVL58:
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 868              		.loc 1 766 0
 869 0000 0368     		ldr	r3, [r0]
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 870              		.loc 1 759 0
 871 0002 70B5     		push	{r4, r5, r6, lr}
 872              	.LCFI5:
 873              		.cfi_def_cfa_offset 16
 874              		.cfi_offset 4, -16
 875              		.cfi_offset 5, -12
 876              		.cfi_offset 6, -8
 877              		.cfi_offset 14, -4
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 878              		.loc 1 766 0
 879 0004 9B68     		ldr	r3, [r3, #8]
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 880              		.loc 1 759 0
 881 0006 0400     		movs	r4, r0
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 882              		.loc 1 811 0
 883 0008 0220     		movs	r0, #2
 884              	.LVL59:
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 885              		.loc 1 766 0
 886 000a 5B07     		lsls	r3, r3, #29
 887 000c 1AD4     		bmi	.L79
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 888              		.loc 1 769 0
 889 000e 2500     		movs	r5, r4
 890 0010 4035     		adds	r5, r5, #64
 891 0012 2B78     		ldrb	r3, [r5]
 892 0014 012B     		cmp	r3, #1
 893 0016 15D0     		beq	.L79
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 894              		.loc 1 769 0 is_stmt 0 discriminator 2
 895 0018 0123     		movs	r3, #1
 896 001a 2B70     		strb	r3, [r5]
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 897              		.loc 1 774 0 is_stmt 1 discriminator 2
 898 001c E369     		ldr	r3, [r4, #28]
 899 001e 012B     		cmp	r3, #1
 900 0020 11D1     		bne	.L80
 901              	.LVL60:
ARM GAS  /tmp/ccZRAhSM.s 			page 56


 902              	.L81:
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 903              		.loc 1 785 0
 904 0022 636C     		ldr	r3, [r4, #68]
 905 0024 0B4A     		ldr	r2, .L88
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 906              		.loc 1 790 0
 907 0026 0020     		movs	r0, #0
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 908              		.loc 1 785 0
 909 0028 1A40     		ands	r2, r3
 910 002a 8023     		movs	r3, #128
 911 002c 5B00     		lsls	r3, r3, #1
 912 002e 1343     		orrs	r3, r2
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 913              		.loc 1 800 0
 914 0030 1C22     		movs	r2, #28
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 915              		.loc 1 785 0
 916 0032 6364     		str	r3, [r4, #68]
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 917              		.loc 1 800 0
 918 0034 2368     		ldr	r3, [r4]
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 919              		.loc 1 790 0
 920 0036 A064     		str	r0, [r4, #72]
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 921              		.loc 1 795 0
 922 0038 2870     		strb	r0, [r5]
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 923              		.loc 1 800 0
 924 003a 1A60     		str	r2, [r3]
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 925              		.loc 1 806 0
 926 003c 9968     		ldr	r1, [r3, #8]
 927 003e 183A     		subs	r2, r2, #24
 928 0040 0A43     		orrs	r2, r1
 929 0042 9A60     		str	r2, [r3, #8]
 930              	.L79:
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 931              		.loc 1 816 0
 932              		@ sp needed
 933              	.LVL61:
 934 0044 70BD     		pop	{r4, r5, r6, pc}
 935              	.LVL62:
 936              	.L80:
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 937              		.loc 1 776 0
 938 0046 2000     		movs	r0, r4
 939 0048 FFF7FEFF 		bl	ADC_Enable
 940              	.LVL63:
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 941              		.loc 1 780 0
 942 004c 0028     		cmp	r0, #0
 943 004e F9D1     		bne	.L79
 944 0050 E7E7     		b	.L81
 945              	.L89:
ARM GAS  /tmp/ccZRAhSM.s 			page 57


 946 0052 C046     		.align	2
 947              	.L88:
 948 0054 FEF0FFFF 		.word	-3842
 949              		.cfi_endproc
 950              	.LFE39:
 952              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 953              		.align	1
 954              		.global	HAL_ADC_Stop
 955              		.syntax unified
 956              		.code	16
 957              		.thumb_func
 958              		.fpu softvfp
 960              	HAL_ADC_Stop:
 961              	.LFB40:
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 962              		.loc 1 824 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              	.LVL64:
 967 0000 70B5     		push	{r4, r5, r6, lr}
 968              	.LCFI6:
 969              		.cfi_def_cfa_offset 16
 970              		.cfi_offset 4, -16
 971              		.cfi_offset 5, -12
 972              		.cfi_offset 6, -8
 973              		.cfi_offset 14, -4
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 974              		.loc 1 831 0
 975 0002 0600     		movs	r6, r0
 976 0004 4036     		adds	r6, r6, #64
 977 0006 3378     		ldrb	r3, [r6]
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 978              		.loc 1 824 0
 979 0008 0400     		movs	r4, r0
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 980              		.loc 1 831 0
 981 000a 0220     		movs	r0, #2
 982              	.LVL65:
 983 000c 012B     		cmp	r3, #1
 984 000e 12D0     		beq	.L91
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 985              		.loc 1 831 0 is_stmt 0 discriminator 2
 986 0010 0125     		movs	r5, #1
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 987              		.loc 1 834 0 is_stmt 1 discriminator 2
 988 0012 2000     		movs	r0, r4
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 989              		.loc 1 831 0 discriminator 2
 990 0014 3570     		strb	r5, [r6]
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 991              		.loc 1 834 0 discriminator 2
 992 0016 FFF7FEFF 		bl	ADC_ConversionStop
 993              	.LVL66:
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 994              		.loc 1 837 0 discriminator 2
 995 001a 0028     		cmp	r0, #0
ARM GAS  /tmp/ccZRAhSM.s 			page 58


 996 001c 09D1     		bne	.L92
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 997              		.loc 1 840 0
 998 001e 2000     		movs	r0, r4
 999              	.LVL67:
 1000 0020 FFF7FEFF 		bl	ADC_Disable
 1001              	.LVL68:
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1002              		.loc 1 843 0
 1003 0024 0028     		cmp	r0, #0
 1004 0026 04D1     		bne	.L92
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1005              		.loc 1 846 0
 1006 0028 636C     		ldr	r3, [r4, #68]
 1007 002a 034A     		ldr	r2, .L95
 1008 002c 1340     		ands	r3, r2
 1009 002e 1D43     		orrs	r5, r3
 1010 0030 6564     		str	r5, [r4, #68]
 1011              	.LVL69:
 1012              	.L92:
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1013              		.loc 1 853 0
 1014 0032 0023     		movs	r3, #0
 1015 0034 3370     		strb	r3, [r6]
 1016              	.LVL70:
 1017              	.L91:
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1018              		.loc 1 857 0
 1019              		@ sp needed
 1020              	.LVL71:
 1021              	.LVL72:
 1022 0036 70BD     		pop	{r4, r5, r6, pc}
 1023              	.L96:
 1024              		.align	2
 1025              	.L95:
 1026 0038 FEFEFFFF 		.word	-258
 1027              		.cfi_endproc
 1028              	.LFE40:
 1030              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1031              		.align	1
 1032              		.global	HAL_ADC_PollForConversion
 1033              		.syntax unified
 1034              		.code	16
 1035              		.thumb_func
 1036              		.fpu softvfp
 1038              	HAL_ADC_PollForConversion:
 1039              	.LFB41:
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 1040              		.loc 1 878 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL73:
 1045 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1046              	.LCFI7:
 1047              		.cfi_def_cfa_offset 24
 1048              		.cfi_offset 3, -24
ARM GAS  /tmp/ccZRAhSM.s 			page 59


 1049              		.cfi_offset 4, -20
 1050              		.cfi_offset 5, -16
 1051              		.cfi_offset 6, -12
 1052              		.cfi_offset 7, -8
 1053              		.cfi_offset 14, -4
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1054              		.loc 1 886 0
 1055 0002 4569     		ldr	r5, [r0, #20]
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 1056              		.loc 1 878 0
 1057 0004 0400     		movs	r4, r0
 1058 0006 0E00     		movs	r6, r1
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1059              		.loc 1 886 0
 1060 0008 082D     		cmp	r5, #8
 1061 000a 0DD0     		beq	.L98
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1062              		.loc 1 899 0
 1063 000c 0368     		ldr	r3, [r0]
 1064 000e 0120     		movs	r0, #1
 1065              	.LVL74:
 1066 0010 DB68     		ldr	r3, [r3, #12]
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1067              		.loc 1 911 0
 1068 0012 0C25     		movs	r5, #12
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1069              		.loc 1 899 0
 1070 0014 0342     		tst	r3, r0
 1071 0016 07D0     		beq	.L98
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1072              		.loc 1 902 0
 1073 0018 2023     		movs	r3, #32
 1074 001a 626C     		ldr	r2, [r4, #68]
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1075              		.loc 1 905 0
 1076 001c 4034     		adds	r4, r4, #64
 1077              	.LVL75:
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1078              		.loc 1 902 0
 1079 001e 1343     		orrs	r3, r2
 1080 0020 6360     		str	r3, [r4, #4]
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1081              		.loc 1 905 0
 1082 0022 0023     		movs	r3, #0
 1083 0024 2370     		strb	r3, [r4]
 1084              	.LVL76:
 1085              	.L99:
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1086              		.loc 1 985 0
 1087              		@ sp needed
 1088              	.LVL77:
 1089 0026 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1090              	.LVL78:
 1091              	.L98:
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1092              		.loc 1 916 0
 1093 0028 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccZRAhSM.s 			page 60


 1094              	.LVL79:
 1095 002c 0700     		movs	r7, r0
 1096              	.LVL80:
 1097              	.L100:
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1098              		.loc 1 919 0
 1099 002e 2368     		ldr	r3, [r4]
 1100              	.L101:
 1101 0030 1A68     		ldr	r2, [r3]
 1102 0032 2A42     		tst	r2, r5
 1103 0034 23D0     		beq	.L104
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1104              		.loc 1 938 0
 1105 0036 8022     		movs	r2, #128
 1106 0038 616C     		ldr	r1, [r4, #68]
 1107 003a 9200     		lsls	r2, r2, #2
 1108 003c 0A43     		orrs	r2, r1
 1109 003e 6264     		str	r2, [r4, #68]
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1110              		.loc 1 942 0
 1111 0040 C022     		movs	r2, #192
 1112 0042 D968     		ldr	r1, [r3, #12]
 1113 0044 1201     		lsls	r2, r2, #4
 1114 0046 1142     		tst	r1, r2
 1115 0048 12D1     		bne	.L105
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1116              		.loc 1 942 0 is_stmt 0 discriminator 1
 1117 004a 226A     		ldr	r2, [r4, #32]
 1118 004c 002A     		cmp	r2, #0
 1119 004e 0FD1     		bne	.L105
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1120              		.loc 1 946 0 is_stmt 1
 1121 0050 1A68     		ldr	r2, [r3]
 1122 0052 1207     		lsls	r2, r2, #28
 1123 0054 0CD5     		bpl	.L105
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1124              		.loc 1 950 0
 1125 0056 9A68     		ldr	r2, [r3, #8]
 1126 0058 5207     		lsls	r2, r2, #29
 1127 005a 23D4     		bmi	.L106
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1128              		.loc 1 956 0
 1129 005c 0C21     		movs	r1, #12
 1130 005e 5A68     		ldr	r2, [r3, #4]
 1131 0060 8A43     		bics	r2, r1
 1132 0062 5A60     		str	r2, [r3, #4]
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 1133              		.loc 1 959 0
 1134 0064 626C     		ldr	r2, [r4, #68]
 1135 0066 1449     		ldr	r1, .L118
 1136 0068 1140     		ands	r1, r2
 1137 006a 0122     		movs	r2, #1
 1138 006c 0A43     		orrs	r2, r1
 1139 006e 6264     		str	r2, [r4, #68]
 1140              	.L105:
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1141              		.loc 1 984 0
ARM GAS  /tmp/ccZRAhSM.s 			page 61


 1142 0070 0020     		movs	r0, #0
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1143              		.loc 1 977 0
 1144 0072 A269     		ldr	r2, [r4, #24]
 1145 0074 8242     		cmp	r2, r0
 1146 0076 D6D1     		bne	.L99
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1147              		.loc 1 980 0
 1148 0078 0C22     		movs	r2, #12
 1149 007a 1A60     		str	r2, [r3]
 1150 007c D3E7     		b	.L99
 1151              	.L104:
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1152              		.loc 1 922 0
 1153 007e 721C     		adds	r2, r6, #1
 1154 0080 D6D0     		beq	.L101
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1155              		.loc 1 924 0
 1156 0082 002E     		cmp	r6, #0
 1157 0084 08D1     		bne	.L102
 1158              	.L103:
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1159              		.loc 1 927 0
 1160 0086 0423     		movs	r3, #4
 1161 0088 626C     		ldr	r2, [r4, #68]
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1162              		.loc 1 930 0
 1163 008a 4034     		adds	r4, r4, #64
 1164              	.LVL81:
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1165              		.loc 1 927 0
 1166 008c 1343     		orrs	r3, r2
 1167 008e 6360     		str	r3, [r4, #4]
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1168              		.loc 1 930 0
 1169 0090 0023     		movs	r3, #0
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1170              		.loc 1 932 0
 1171 0092 0320     		movs	r0, #3
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1172              		.loc 1 930 0
 1173 0094 2370     		strb	r3, [r4]
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1174              		.loc 1 932 0
 1175 0096 C6E7     		b	.L99
 1176              	.LVL82:
 1177              	.L102:
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1178              		.loc 1 924 0 discriminator 1
 1179 0098 FFF7FEFF 		bl	HAL_GetTick
 1180              	.LVL83:
 1181 009c C01B     		subs	r0, r0, r7
 1182 009e 8642     		cmp	r6, r0
 1183 00a0 C5D2     		bcs	.L100
 1184 00a2 F0E7     		b	.L103
 1185              	.L106:
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
ARM GAS  /tmp/ccZRAhSM.s 			page 62


 1186              		.loc 1 966 0
 1187 00a4 2022     		movs	r2, #32
 1188 00a6 616C     		ldr	r1, [r4, #68]
 1189 00a8 0A43     		orrs	r2, r1
 1190 00aa 6264     		str	r2, [r4, #68]
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1191              		.loc 1 969 0
 1192 00ac 0122     		movs	r2, #1
 1193 00ae A16C     		ldr	r1, [r4, #72]
 1194 00b0 0A43     		orrs	r2, r1
 1195 00b2 A264     		str	r2, [r4, #72]
 1196 00b4 DCE7     		b	.L105
 1197              	.L119:
 1198 00b6 C046     		.align	2
 1199              	.L118:
 1200 00b8 FEFEFFFF 		.word	-258
 1201              		.cfi_endproc
 1202              	.LFE41:
 1204              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1205              		.align	1
 1206              		.global	HAL_ADC_PollForEvent
 1207              		.syntax unified
 1208              		.code	16
 1209              		.thumb_func
 1210              		.fpu softvfp
 1212              	HAL_ADC_PollForEvent:
 1213              	.LFB42:
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
 1214              		.loc 1 998 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218              	.LVL84:
 1219 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1220              	.LCFI8:
 1221              		.cfi_def_cfa_offset 24
 1222              		.cfi_offset 3, -24
 1223              		.cfi_offset 4, -20
 1224              		.cfi_offset 5, -16
 1225              		.cfi_offset 6, -12
 1226              		.cfi_offset 7, -8
 1227              		.cfi_offset 14, -4
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
 1228              		.loc 1 998 0
 1229 0002 0400     		movs	r4, r0
 1230 0004 0D00     		movs	r5, r1
 1231 0006 1600     		movs	r6, r2
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1232              		.loc 1 1006 0
 1233 0008 FFF7FEFF 		bl	HAL_GetTick
 1234              	.LVL85:
 1235 000c 0700     		movs	r7, r0
 1236              	.LVL86:
 1237              	.L121:
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1238              		.loc 1 1009 0
 1239 000e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccZRAhSM.s 			page 63


 1240              	.L122:
 1241 0010 1A68     		ldr	r2, [r3]
 1242 0012 2A40     		ands	r2, r5
 1243 0014 9542     		cmp	r5, r2
 1244 0016 09D1     		bne	.L126
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1245              		.loc 1 1027 0
 1246 0018 802D     		cmp	r5, #128
 1247 001a 1AD1     		bne	.L132
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1248              		.loc 1 1032 0
 1249 001c 8022     		movs	r2, #128
 1250 001e 616C     		ldr	r1, [r4, #68]
 1251 0020 5202     		lsls	r2, r2, #9
 1252 0022 0A43     		orrs	r2, r1
 1253 0024 6264     		str	r2, [r4, #68]
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1254              		.loc 1 1035 0
 1255 0026 1D60     		str	r5, [r3]
 1256              	.L133:
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1257              		.loc 1 1059 0
 1258 0028 0020     		movs	r0, #0
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1259              		.loc 1 1055 0
 1260 002a 0BE0     		b	.L124
 1261              	.L126:
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1262              		.loc 1 1012 0
 1263 002c 721C     		adds	r2, r6, #1
 1264 002e EFD0     		beq	.L122
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1265              		.loc 1 1014 0
 1266 0030 002E     		cmp	r6, #0
 1267 0032 08D1     		bne	.L123
 1268              	.L125:
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1269              		.loc 1 1017 0
 1270 0034 0423     		movs	r3, #4
 1271 0036 626C     		ldr	r2, [r4, #68]
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1272              		.loc 1 1022 0
 1273 0038 0320     		movs	r0, #3
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1274              		.loc 1 1017 0
 1275 003a 1343     		orrs	r3, r2
 1276 003c 6364     		str	r3, [r4, #68]
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1277              		.loc 1 1020 0
 1278 003e 0023     		movs	r3, #0
 1279 0040 4034     		adds	r4, r4, #64
 1280              	.LVL87:
 1281 0042 2370     		strb	r3, [r4]
 1282              	.LVL88:
 1283              	.L124:
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1284              		.loc 1 1060 0
ARM GAS  /tmp/ccZRAhSM.s 			page 64


 1285              		@ sp needed
 1286              	.LVL89:
 1287              	.LVL90:
 1288              	.LVL91:
 1289 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1290              	.LVL92:
 1291              	.L123:
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1292              		.loc 1 1014 0 discriminator 1
 1293 0046 FFF7FEFF 		bl	HAL_GetTick
 1294              	.LVL93:
 1295 004a C01B     		subs	r0, r0, r7
 1296 004c 8642     		cmp	r6, r0
 1297 004e DED2     		bcs	.L121
 1298 0050 F0E7     		b	.L125
 1299              	.L132:
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1300              		.loc 1 1044 0
 1301 0052 626B     		ldr	r2, [r4, #52]
 1302 0054 012A     		cmp	r2, #1
 1303 0056 08D1     		bne	.L129
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1304              		.loc 1 1047 0
 1305 0058 8022     		movs	r2, #128
 1306 005a 616C     		ldr	r1, [r4, #68]
 1307 005c D200     		lsls	r2, r2, #3
 1308 005e 0A43     		orrs	r2, r1
 1309 0060 6264     		str	r2, [r4, #68]
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1310              		.loc 1 1050 0
 1311 0062 0222     		movs	r2, #2
 1312 0064 A16C     		ldr	r1, [r4, #72]
 1313 0066 0A43     		orrs	r2, r1
 1314 0068 A264     		str	r2, [r4, #72]
 1315              	.L129:
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1316              		.loc 1 1054 0
 1317 006a 1022     		movs	r2, #16
 1318 006c 1A60     		str	r2, [r3]
 1319 006e DBE7     		b	.L133
 1320              		.cfi_endproc
 1321              	.LFE42:
 1323              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1324              		.align	1
 1325              		.global	HAL_ADC_Start_IT
 1326              		.syntax unified
 1327              		.code	16
 1328              		.thumb_func
 1329              		.fpu softvfp
 1331              	HAL_ADC_Start_IT:
 1332              	.LFB43:
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1333              		.loc 1 1074 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 0
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337              	.LVL94:
ARM GAS  /tmp/ccZRAhSM.s 			page 65


1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1338              		.loc 1 1081 0
 1339 0000 0368     		ldr	r3, [r0]
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1340              		.loc 1 1074 0
 1341 0002 70B5     		push	{r4, r5, r6, lr}
 1342              	.LCFI9:
 1343              		.cfi_def_cfa_offset 16
 1344              		.cfi_offset 4, -16
 1345              		.cfi_offset 5, -12
 1346              		.cfi_offset 6, -8
 1347              		.cfi_offset 14, -4
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1348              		.loc 1 1081 0
 1349 0004 9B68     		ldr	r3, [r3, #8]
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1350              		.loc 1 1074 0
 1351 0006 0400     		movs	r4, r0
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
 1352              		.loc 1 1140 0
 1353 0008 0220     		movs	r0, #2
 1354              	.LVL95:
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1355              		.loc 1 1081 0
 1356 000a 5B07     		lsls	r3, r3, #29
 1357 000c 20D4     		bmi	.L135
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1358              		.loc 1 1084 0
 1359 000e 2500     		movs	r5, r4
 1360 0010 4035     		adds	r5, r5, #64
 1361 0012 2B78     		ldrb	r3, [r5]
 1362 0014 012B     		cmp	r3, #1
 1363 0016 1BD0     		beq	.L135
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1364              		.loc 1 1084 0 is_stmt 0 discriminator 2
 1365 0018 0123     		movs	r3, #1
 1366 001a 2B70     		strb	r3, [r5]
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1367              		.loc 1 1089 0 is_stmt 1 discriminator 2
 1368 001c E369     		ldr	r3, [r4, #28]
 1369 001e 012B     		cmp	r3, #1
 1370 0020 11D1     		bne	.L136
 1371              	.LVL96:
 1372              	.L139:
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1373              		.loc 1 1100 0
 1374 0022 636C     		ldr	r3, [r4, #68]
 1375 0024 124A     		ldr	r2, .L149
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1376              		.loc 1 1119 0
 1377 0026 6169     		ldr	r1, [r4, #20]
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1378              		.loc 1 1100 0
 1379 0028 1A40     		ands	r2, r3
 1380 002a 8023     		movs	r3, #128
 1381 002c 5B00     		lsls	r3, r3, #1
 1382 002e 1343     		orrs	r3, r2
ARM GAS  /tmp/ccZRAhSM.s 			page 66


 1383 0030 6364     		str	r3, [r4, #68]
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1384              		.loc 1 1105 0
 1385 0032 0023     		movs	r3, #0
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1386              		.loc 1 1115 0
 1387 0034 1C22     		movs	r2, #28
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1388              		.loc 1 1105 0
 1389 0036 A364     		str	r3, [r4, #72]
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1390              		.loc 1 1110 0
 1391 0038 2B70     		strb	r3, [r5]
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1392              		.loc 1 1115 0
 1393 003a 2368     		ldr	r3, [r4]
 1394 003c 1A60     		str	r2, [r3]
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1395              		.loc 1 1119 0
 1396 003e 0829     		cmp	r1, #8
 1397 0040 07D0     		beq	.L138
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1398              		.loc 1 1127 0
 1399 0042 5968     		ldr	r1, [r3, #4]
 1400 0044 0BE0     		b	.L148
 1401              	.LVL97:
 1402              	.L136:
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1403              		.loc 1 1091 0
 1404 0046 2000     		movs	r0, r4
 1405 0048 FFF7FEFF 		bl	ADC_Enable
 1406              	.LVL98:
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1407              		.loc 1 1095 0
 1408 004c 0028     		cmp	r0, #0
 1409 004e E8D0     		beq	.L139
 1410              	.LVL99:
 1411              	.L135:
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1412              		.loc 1 1145 0
 1413              		@ sp needed
 1414              	.LVL100:
 1415 0050 70BD     		pop	{r4, r5, r6, pc}
 1416              	.LVL101:
 1417              	.L138:
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1418              		.loc 1 1122 0
 1419 0052 0421     		movs	r1, #4
 1420 0054 5A68     		ldr	r2, [r3, #4]
 1421 0056 8A43     		bics	r2, r1
 1422 0058 5A60     		str	r2, [r3, #4]
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1423              		.loc 1 1123 0
 1424 005a 1822     		movs	r2, #24
 1425 005c 5968     		ldr	r1, [r3, #4]
 1426              	.L148:
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
ARM GAS  /tmp/ccZRAhSM.s 			page 67


 1427              		.loc 1 1127 0
 1428 005e 0A43     		orrs	r2, r1
 1429 0060 5A60     		str	r2, [r3, #4]
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1430              		.loc 1 1135 0
 1431 0062 0422     		movs	r2, #4
 1432 0064 9968     		ldr	r1, [r3, #8]
 1433 0066 0020     		movs	r0, #0
 1434 0068 0A43     		orrs	r2, r1
 1435 006a 9A60     		str	r2, [r3, #8]
 1436 006c F0E7     		b	.L135
 1437              	.L150:
 1438 006e C046     		.align	2
 1439              	.L149:
 1440 0070 FEF0FFFF 		.word	-3842
 1441              		.cfi_endproc
 1442              	.LFE43:
 1444              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1445              		.align	1
 1446              		.global	HAL_ADC_Stop_IT
 1447              		.syntax unified
 1448              		.code	16
 1449              		.thumb_func
 1450              		.fpu softvfp
 1452              	HAL_ADC_Stop_IT:
 1453              	.LFB44:
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1454              		.loc 1 1155 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 1458              	.LVL102:
 1459 0000 70B5     		push	{r4, r5, r6, lr}
 1460              	.LCFI10:
 1461              		.cfi_def_cfa_offset 16
 1462              		.cfi_offset 4, -16
 1463              		.cfi_offset 5, -12
 1464              		.cfi_offset 6, -8
 1465              		.cfi_offset 14, -4
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1466              		.loc 1 1162 0
 1467 0002 0600     		movs	r6, r0
 1468 0004 4036     		adds	r6, r6, #64
 1469 0006 3378     		ldrb	r3, [r6]
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1470              		.loc 1 1155 0
 1471 0008 0400     		movs	r4, r0
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1472              		.loc 1 1162 0
 1473 000a 0220     		movs	r0, #2
 1474              	.LVL103:
 1475 000c 012B     		cmp	r3, #1
 1476 000e 17D0     		beq	.L152
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1477              		.loc 1 1162 0 is_stmt 0 discriminator 2
 1478 0010 0125     		movs	r5, #1
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
ARM GAS  /tmp/ccZRAhSM.s 			page 68


 1479              		.loc 1 1165 0 is_stmt 1 discriminator 2
 1480 0012 2000     		movs	r0, r4
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1481              		.loc 1 1162 0 discriminator 2
 1482 0014 3570     		strb	r5, [r6]
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
 1483              		.loc 1 1165 0 discriminator 2
 1484 0016 FFF7FEFF 		bl	ADC_ConversionStop
 1485              	.LVL104:
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1486              		.loc 1 1168 0 discriminator 2
 1487 001a 0028     		cmp	r0, #0
 1488 001c 0ED1     		bne	.L153
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1489              		.loc 1 1172 0
 1490 001e 1C21     		movs	r1, #28
 1491 0020 2268     		ldr	r2, [r4]
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1492              		.loc 1 1175 0
 1493 0022 2000     		movs	r0, r4
 1494              	.LVL105:
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1495              		.loc 1 1172 0
 1496 0024 5368     		ldr	r3, [r2, #4]
 1497 0026 8B43     		bics	r3, r1
 1498 0028 5360     		str	r3, [r2, #4]
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1499              		.loc 1 1175 0
 1500 002a FFF7FEFF 		bl	ADC_Disable
 1501              	.LVL106:
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1502              		.loc 1 1178 0
 1503 002e 0028     		cmp	r0, #0
 1504 0030 04D1     		bne	.L153
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1505              		.loc 1 1181 0
 1506 0032 636C     		ldr	r3, [r4, #68]
 1507 0034 034A     		ldr	r2, .L156
 1508 0036 1340     		ands	r3, r2
 1509 0038 1D43     		orrs	r5, r3
 1510 003a 6564     		str	r5, [r4, #68]
 1511              	.LVL107:
 1512              	.L153:
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1513              		.loc 1 1188 0
 1514 003c 0023     		movs	r3, #0
 1515 003e 3370     		strb	r3, [r6]
 1516              	.LVL108:
 1517              	.L152:
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1518              		.loc 1 1192 0
 1519              		@ sp needed
 1520              	.LVL109:
 1521              	.LVL110:
 1522 0040 70BD     		pop	{r4, r5, r6, pc}
 1523              	.L157:
 1524 0042 C046     		.align	2
ARM GAS  /tmp/ccZRAhSM.s 			page 69


 1525              	.L156:
 1526 0044 FEFEFFFF 		.word	-258
 1527              		.cfi_endproc
 1528              	.LFE44:
 1530              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1531              		.align	1
 1532              		.global	HAL_ADC_Start_DMA
 1533              		.syntax unified
 1534              		.code	16
 1535              		.thumb_func
 1536              		.fpu softvfp
 1538              	HAL_ADC_Start_DMA:
 1539              	.LFB45:
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1540              		.loc 1 1208 0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 8
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              	.LVL111:
 1545 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1546              	.LCFI11:
 1547              		.cfi_def_cfa_offset 32
 1548              		.cfi_offset 0, -32
 1549              		.cfi_offset 1, -28
 1550              		.cfi_offset 2, -24
 1551              		.cfi_offset 4, -20
 1552              		.cfi_offset 5, -16
 1553              		.cfi_offset 6, -12
 1554              		.cfi_offset 7, -8
 1555              		.cfi_offset 14, -4
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1556              		.loc 1 1215 0
 1557 0002 0368     		ldr	r3, [r0]
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1558              		.loc 1 1208 0
 1559 0004 0400     		movs	r4, r0
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1560              		.loc 1 1215 0
 1561 0006 9B68     		ldr	r3, [r3, #8]
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1562              		.loc 1 1208 0
 1563 0008 0F00     		movs	r7, r1
 1564 000a 0192     		str	r2, [sp, #4]
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1565              		.loc 1 1282 0
 1566 000c 0220     		movs	r0, #2
 1567              	.LVL112:
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1568              		.loc 1 1215 0
 1569 000e 5B07     		lsls	r3, r3, #29
 1570 0010 30D4     		bmi	.L159
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1571              		.loc 1 1218 0
 1572 0012 2600     		movs	r6, r4
 1573 0014 4036     		adds	r6, r6, #64
 1574 0016 3378     		ldrb	r3, [r6]
 1575 0018 012B     		cmp	r3, #1
ARM GAS  /tmp/ccZRAhSM.s 			page 70


 1576 001a 2BD0     		beq	.L159
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1577              		.loc 1 1218 0 is_stmt 0 discriminator 2
 1578 001c 0123     		movs	r3, #1
 1579 001e 3370     		strb	r3, [r6]
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1580              		.loc 1 1223 0 is_stmt 1 discriminator 2
 1581 0020 E369     		ldr	r3, [r4, #28]
 1582 0022 012B     		cmp	r3, #1
 1583 0024 27D1     		bne	.L160
 1584              	.LVL113:
 1585              	.L161:
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1586              		.loc 1 1234 0
 1587 0026 636C     		ldr	r3, [r4, #68]
 1588 0028 164A     		ldr	r2, .L168
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1589              		.loc 1 1239 0
 1590 002a 0025     		movs	r5, #0
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1591              		.loc 1 1234 0
 1592 002c 1A40     		ands	r2, r3
 1593 002e 8023     		movs	r3, #128
 1594 0030 5B00     		lsls	r3, r3, #1
 1595 0032 1343     		orrs	r3, r2
 1596 0034 6364     		str	r3, [r4, #68]
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1597              		.loc 1 1247 0
 1598 0036 E06B     		ldr	r0, [r4, #60]
 1599 0038 134B     		ldr	r3, .L168+4
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1600              		.loc 1 1239 0
 1601 003a A564     		str	r5, [r4, #72]
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1602              		.loc 1 1244 0
 1603 003c 3570     		strb	r5, [r6]
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1604              		.loc 1 1247 0
 1605 003e 8362     		str	r3, [r0, #40]
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1606              		.loc 1 1250 0
 1607 0040 124B     		ldr	r3, .L168+8
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1608              		.loc 1 1262 0
 1609 0042 2168     		ldr	r1, [r4]
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1610              		.loc 1 1250 0
 1611 0044 C362     		str	r3, [r0, #44]
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1612              		.loc 1 1253 0
 1613 0046 124B     		ldr	r3, .L168+12
 1614 0048 0363     		str	r3, [r0, #48]
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1615              		.loc 1 1262 0
 1616 004a 1C23     		movs	r3, #28
 1617 004c 0B60     		str	r3, [r1]
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
ARM GAS  /tmp/ccZRAhSM.s 			page 71


 1618              		.loc 1 1265 0
 1619 004e 4A68     		ldr	r2, [r1, #4]
 1620 0050 0C3B     		subs	r3, r3, #12
 1621 0052 1343     		orrs	r3, r2
 1622 0054 4B60     		str	r3, [r1, #4]
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1623              		.loc 1 1268 0
 1624 0056 0123     		movs	r3, #1
 1625 0058 CA68     		ldr	r2, [r1, #12]
 1626 005a 1343     		orrs	r3, r2
 1627 005c CB60     		str	r3, [r1, #12]
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
 1628              		.loc 1 1271 0
 1629 005e 3A00     		movs	r2, r7
 1630 0060 4031     		adds	r1, r1, #64
 1631 0062 019B     		ldr	r3, [sp, #4]
 1632 0064 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1633              	.LVL114:
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1634              		.loc 1 1277 0
 1635 0068 0423     		movs	r3, #4
 1636 006a 2800     		movs	r0, r5
 1637 006c 2268     		ldr	r2, [r4]
 1638 006e 9168     		ldr	r1, [r2, #8]
 1639 0070 0B43     		orrs	r3, r1
 1640 0072 9360     		str	r3, [r2, #8]
 1641              	.L159:
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1642              		.loc 1 1287 0
 1643              		@ sp needed
 1644              	.LVL115:
 1645              	.LVL116:
 1646 0074 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 1647              	.LVL117:
 1648              	.L160:
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1649              		.loc 1 1225 0
 1650 0076 2000     		movs	r0, r4
 1651 0078 FFF7FEFF 		bl	ADC_Enable
 1652              	.LVL118:
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1653              		.loc 1 1229 0
 1654 007c 0028     		cmp	r0, #0
 1655 007e F9D1     		bne	.L159
 1656 0080 D1E7     		b	.L161
 1657              	.L169:
 1658 0082 C046     		.align	2
 1659              	.L168:
 1660 0084 FEF0FFFF 		.word	-3842
 1661 0088 00000000 		.word	ADC_DMAConvCplt
 1662 008c 00000000 		.word	ADC_DMAHalfConvCplt
 1663 0090 00000000 		.word	ADC_DMAError
 1664              		.cfi_endproc
 1665              	.LFE45:
 1667              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1668              		.align	1
 1669              		.global	HAL_ADC_Stop_DMA
ARM GAS  /tmp/ccZRAhSM.s 			page 72


 1670              		.syntax unified
 1671              		.code	16
 1672              		.thumb_func
 1673              		.fpu softvfp
 1675              	HAL_ADC_Stop_DMA:
 1676              	.LFB46:
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1677              		.loc 1 1297 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 1681              	.LVL119:
 1682 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1683              	.LCFI12:
 1684              		.cfi_def_cfa_offset 24
 1685              		.cfi_offset 3, -24
 1686              		.cfi_offset 4, -20
 1687              		.cfi_offset 5, -16
 1688              		.cfi_offset 6, -12
 1689              		.cfi_offset 7, -8
 1690              		.cfi_offset 14, -4
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1691              		.loc 1 1304 0
 1692 0002 0600     		movs	r6, r0
 1693 0004 4036     		adds	r6, r6, #64
 1694 0006 3378     		ldrb	r3, [r6]
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1695              		.loc 1 1297 0
 1696 0008 0400     		movs	r4, r0
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1697              		.loc 1 1304 0
 1698 000a 0225     		movs	r5, #2
 1699 000c 012B     		cmp	r3, #1
 1700 000e 20D0     		beq	.L171
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1701              		.loc 1 1304 0 is_stmt 0 discriminator 2
 1702 0010 0127     		movs	r7, #1
 1703 0012 3770     		strb	r7, [r6]
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1704              		.loc 1 1307 0 is_stmt 1 discriminator 2
 1705 0014 FFF7FEFF 		bl	ADC_ConversionStop
 1706              	.LVL120:
 1707 0018 051E     		subs	r5, r0, #0
 1708              	.LVL121:
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1709              		.loc 1 1310 0 discriminator 2
 1710 001a 18D1     		bne	.L172
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1711              		.loc 1 1313 0
 1712 001c 2268     		ldr	r2, [r4]
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1713              		.loc 1 1317 0
 1714 001e E06B     		ldr	r0, [r4, #60]
 1715              	.LVL122:
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1716              		.loc 1 1313 0
 1717 0020 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccZRAhSM.s 			page 73


 1718 0022 BB43     		bics	r3, r7
 1719 0024 D360     		str	r3, [r2, #12]
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1720              		.loc 1 1317 0
 1721 0026 FFF7FEFF 		bl	HAL_DMA_Abort
 1722              	.LVL123:
 1723 002a 051E     		subs	r5, r0, #0
 1724              	.LVL124:
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1725              		.loc 1 1320 0
 1726 002c 03D0     		beq	.L173
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1727              		.loc 1 1323 0
 1728 002e 4023     		movs	r3, #64
 1729 0030 626C     		ldr	r2, [r4, #68]
 1730 0032 1343     		orrs	r3, r2
 1731 0034 6364     		str	r3, [r4, #68]
 1732              	.L173:
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1733              		.loc 1 1327 0
 1734 0036 1021     		movs	r1, #16
 1735 0038 2268     		ldr	r2, [r4]
 1736 003a 5368     		ldr	r3, [r2, #4]
 1737 003c 8B43     		bics	r3, r1
 1738 003e 5360     		str	r3, [r2, #4]
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1739              		.loc 1 1332 0
 1740 0040 0028     		cmp	r0, #0
 1741 0042 08D1     		bne	.L174
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1742              		.loc 1 1334 0
 1743 0044 2000     		movs	r0, r4
 1744              	.LVL125:
 1745 0046 FFF7FEFF 		bl	ADC_Disable
 1746              	.LVL126:
 1747 004a 051E     		subs	r5, r0, #0
 1748              	.LVL127:
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1749              		.loc 1 1342 0
 1750 004c 07D0     		beq	.L175
 1751              	.LVL128:
 1752              	.L172:
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1753              		.loc 1 1353 0
 1754 004e 0023     		movs	r3, #0
 1755 0050 3370     		strb	r3, [r6]
 1756              	.LVL129:
 1757              	.L171:
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1758              		.loc 1 1357 0
 1759 0052 2800     		movs	r0, r5
 1760              		@ sp needed
 1761              	.LVL130:
 1762              	.LVL131:
 1763 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1764              	.LVL132:
 1765              	.L174:
ARM GAS  /tmp/ccZRAhSM.s 			page 74


1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1766              		.loc 1 1338 0
 1767 0056 2000     		movs	r0, r4
 1768              	.LVL133:
 1769 0058 FFF7FEFF 		bl	ADC_Disable
 1770              	.LVL134:
 1771 005c F7E7     		b	.L172
 1772              	.LVL135:
 1773              	.L175:
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1774              		.loc 1 1345 0
 1775 005e 636C     		ldr	r3, [r4, #68]
 1776 0060 024A     		ldr	r2, .L181
 1777 0062 1A40     		ands	r2, r3
 1778 0064 0123     		movs	r3, #1
 1779 0066 1343     		orrs	r3, r2
 1780 0068 6364     		str	r3, [r4, #68]
 1781 006a F0E7     		b	.L172
 1782              	.L182:
 1783              		.align	2
 1784              	.L181:
 1785 006c FEFEFFFF 		.word	-258
 1786              		.cfi_endproc
 1787              	.LFE46:
 1789              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1790              		.align	1
 1791              		.global	HAL_ADC_GetValue
 1792              		.syntax unified
 1793              		.code	16
 1794              		.thumb_func
 1795              		.fpu softvfp
 1797              	HAL_ADC_GetValue:
 1798              	.LFB47:
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 1799              		.loc 1 1379 0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803              		@ link register save eliminated.
 1804              	.LVL136:
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1805              		.loc 1 1387 0
 1806 0000 0368     		ldr	r3, [r0]
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1807              		.loc 1 1388 0
 1808              		@ sp needed
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1809              		.loc 1 1387 0
 1810 0002 186C     		ldr	r0, [r3, #64]
 1811              	.LVL137:
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1812              		.loc 1 1388 0
 1813 0004 7047     		bx	lr
 1814              		.cfi_endproc
 1815              	.LFE47:
 1817              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1818              		.align	1
ARM GAS  /tmp/ccZRAhSM.s 			page 75


 1819              		.weak	HAL_ADC_ConvCpltCallback
 1820              		.syntax unified
 1821              		.code	16
 1822              		.thumb_func
 1823              		.fpu softvfp
 1825              	HAL_ADC_ConvCpltCallback:
 1826              	.LFB69:
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 0
 1829              		@ frame_needed = 0, uses_anonymous_args = 0
 1830              		@ link register save eliminated.
 1831              		@ sp needed
 1832 0000 7047     		bx	lr
 1833              		.cfi_endproc
 1834              	.LFE69:
 1836              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1837              		.align	1
 1838              		.syntax unified
 1839              		.code	16
 1840              		.thumb_func
 1841              		.fpu softvfp
 1843              	ADC_DMAConvCplt:
 1844              	.LFB60:
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1845              		.loc 1 2084 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 0, uses_anonymous_args = 0
 1849              	.LVL138:
2085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1850              		.loc 1 2089 0
 1851 0000 5022     		movs	r2, #80
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1852              		.loc 1 2086 0
 1853 0002 436A     		ldr	r3, [r0, #36]
 1854              	.LVL139:
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1855              		.loc 1 2084 0
 1856 0004 10B5     		push	{r4, lr}
 1857              	.LCFI13:
 1858              		.cfi_def_cfa_offset 8
 1859              		.cfi_offset 4, -8
 1860              		.cfi_offset 14, -4
 1861              		.loc 1 2089 0
 1862 0006 596C     		ldr	r1, [r3, #68]
ARM GAS  /tmp/ccZRAhSM.s 			page 76


 1863 0008 1142     		tst	r1, r2
 1864 000a 2AD1     		bne	.L186
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 1865              		.loc 1 2092 0
 1866 000c 596C     		ldr	r1, [r3, #68]
 1867 000e B132     		adds	r2, r2, #177
 1868 0010 FF32     		adds	r2, r2, #255
 1869 0012 0A43     		orrs	r2, r1
2093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1870              		.loc 1 2096 0
 1871 0014 C021     		movs	r1, #192
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1872              		.loc 1 2092 0
 1873 0016 5A64     		str	r2, [r3, #68]
 1874              		.loc 1 2096 0
 1875 0018 1A68     		ldr	r2, [r3]
 1876 001a 0901     		lsls	r1, r1, #4
 1877 001c D068     		ldr	r0, [r2, #12]
 1878              	.LVL140:
 1879 001e 0842     		tst	r0, r1
 1880 0020 12D1     		bne	.L187
 1881              		.loc 1 2096 0 is_stmt 0 discriminator 1
 1882 0022 196A     		ldr	r1, [r3, #32]
 1883 0024 0029     		cmp	r1, #0
 1884 0026 0FD1     		bne	.L187
2097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1885              		.loc 1 2100 0 is_stmt 1
 1886 0028 1168     		ldr	r1, [r2]
 1887 002a 0907     		lsls	r1, r1, #28
 1888 002c 0CD5     		bpl	.L187
2101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1889              		.loc 1 2104 0
 1890 002e 9168     		ldr	r1, [r2, #8]
 1891 0030 4907     		lsls	r1, r1, #29
 1892 0032 0DD4     		bmi	.L188
2105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 1893              		.loc 1 2110 0
 1894 0034 0C20     		movs	r0, #12
 1895 0036 5168     		ldr	r1, [r2, #4]
 1896 0038 8143     		bics	r1, r0
 1897 003a 5160     		str	r1, [r2, #4]
ARM GAS  /tmp/ccZRAhSM.s 			page 77


2111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
2113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 1898              		.loc 1 2113 0
 1899 003c 5A6C     		ldr	r2, [r3, #68]
 1900 003e 0B49     		ldr	r1, .L193
 1901 0040 1140     		ands	r1, r2
 1902 0042 0122     		movs	r2, #1
 1903 0044 0A43     		orrs	r2, r1
 1904 0046 5A64     		str	r2, [r3, #68]
 1905              	.L187:
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
2118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
2129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 1906              		.loc 1 2129 0
 1907 0048 1800     		movs	r0, r3
 1908 004a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1909              	.LVL141:
 1910              	.L185:
2130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
2132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Call DMA error callback */
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1911              		.loc 1 2137 0
 1912              		@ sp needed
 1913 004e 10BD     		pop	{r4, pc}
 1914              	.LVL142:
 1915              	.L188:
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 1916              		.loc 1 2120 0
 1917 0050 2022     		movs	r2, #32
 1918 0052 596C     		ldr	r1, [r3, #68]
 1919 0054 0A43     		orrs	r2, r1
 1920 0056 5A64     		str	r2, [r3, #68]
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 1921              		.loc 1 2123 0
 1922 0058 0122     		movs	r2, #1
 1923 005a 996C     		ldr	r1, [r3, #72]
 1924 005c 0A43     		orrs	r2, r1
 1925 005e 9A64     		str	r2, [r3, #72]
ARM GAS  /tmp/ccZRAhSM.s 			page 78


 1926 0060 F2E7     		b	.L187
 1927              	.LVL143:
 1928              	.L186:
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1929              		.loc 1 2134 0
 1930 0062 DB6B     		ldr	r3, [r3, #60]
 1931              	.LVL144:
 1932 0064 1B6B     		ldr	r3, [r3, #48]
 1933 0066 9847     		blx	r3
 1934              	.LVL145:
 1935              		.loc 1 2137 0
 1936 0068 F1E7     		b	.L185
 1937              	.L194:
 1938 006a C046     		.align	2
 1939              	.L193:
 1940 006c FEFEFFFF 		.word	-258
 1941              		.cfi_endproc
 1942              	.LFE60:
 1944              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1945              		.align	1
 1946              		.weak	HAL_ADC_ConvHalfCpltCallback
 1947              		.syntax unified
 1948              		.code	16
 1949              		.thumb_func
 1950              		.fpu softvfp
 1952              	HAL_ADC_ConvHalfCpltCallback:
 1953              	.LFB67:
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 0
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 1957              		@ link register save eliminated.
 1958              		@ sp needed
 1959 0000 7047     		bx	lr
 1960              		.cfi_endproc
 1961              	.LFE67:
 1963              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1964              		.align	1
 1965              		.syntax unified
 1966              		.code	16
 1967              		.thumb_func
 1968              		.fpu softvfp
 1970              	ADC_DMAHalfConvCplt:
 1971              	.LFB61:
2138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1972              		.loc 1 2145 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976              	.LVL146:
 1977              		.loc 1 2145 0
ARM GAS  /tmp/ccZRAhSM.s 			page 79


 1978 0000 10B5     		push	{r4, lr}
 1979              	.LCFI14:
 1980              		.cfi_def_cfa_offset 8
 1981              		.cfi_offset 4, -8
 1982              		.cfi_offset 14, -4
2146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Half conversion callback */
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 1983              		.loc 1 2150 0
 1984 0002 406A     		ldr	r0, [r0, #36]
 1985              	.LVL147:
 1986 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1987              	.LVL148:
2151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1988              		.loc 1 2151 0
 1989              		@ sp needed
 1990 0008 10BD     		pop	{r4, pc}
 1991              		.cfi_endproc
 1992              	.LFE61:
 1994              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1995              		.align	1
 1996              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1997              		.syntax unified
 1998              		.code	16
 1999              		.thumb_func
 2000              		.fpu softvfp
 2002              	HAL_ADC_LevelOutOfWindowCallback:
 2003              	.LFB65:
 2004              		.cfi_startproc
 2005              		@ args = 0, pretend = 0, frame = 0
 2006              		@ frame_needed = 0, uses_anonymous_args = 0
 2007              		@ link register save eliminated.
 2008              		@ sp needed
 2009 0000 7047     		bx	lr
 2010              		.cfi_endproc
 2011              	.LFE65:
 2013              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2014              		.align	1
 2015              		.weak	HAL_ADC_ErrorCallback
 2016              		.syntax unified
 2017              		.code	16
 2018              		.thumb_func
 2019              		.fpu softvfp
 2021              	HAL_ADC_ErrorCallback:
 2022              	.LFB52:
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2023              		.loc 1 1558 0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 0
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 2027              		@ link register save eliminated.
 2028              	.LVL149:
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2029              		.loc 1 1565 0
 2030              		@ sp needed
ARM GAS  /tmp/ccZRAhSM.s 			page 80


 2031 0000 7047     		bx	lr
 2032              		.cfi_endproc
 2033              	.LFE52:
 2035              		.section	.text.ADC_DMAError,"ax",%progbits
 2036              		.align	1
 2037              		.syntax unified
 2038              		.code	16
 2039              		.thumb_func
 2040              		.fpu softvfp
 2042              	ADC_DMAError:
 2043              	.LFB62:
2152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA error callback 
2155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2044              		.loc 1 2159 0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048              	.LVL150:
2160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2049              		.loc 1 2164 0
 2050 0000 4023     		movs	r3, #64
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2051              		.loc 1 2161 0
 2052 0002 406A     		ldr	r0, [r0, #36]
 2053              	.LVL151:
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2054              		.loc 1 2159 0
 2055 0004 10B5     		push	{r4, lr}
 2056              	.LCFI15:
 2057              		.cfi_def_cfa_offset 8
 2058              		.cfi_offset 4, -8
 2059              		.cfi_offset 14, -4
 2060              		.loc 1 2164 0
 2061 0006 426C     		ldr	r2, [r0, #68]
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Error callback */
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2062              		.loc 1 2171 0
 2063              		@ sp needed
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2064              		.loc 1 2164 0
 2065 0008 1343     		orrs	r3, r2
 2066 000a 4364     		str	r3, [r0, #68]
ARM GAS  /tmp/ccZRAhSM.s 			page 81


2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2067              		.loc 1 2167 0
 2068 000c 0423     		movs	r3, #4
 2069 000e 826C     		ldr	r2, [r0, #72]
 2070 0010 1343     		orrs	r3, r2
 2071 0012 8364     		str	r3, [r0, #72]
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2072              		.loc 1 2170 0
 2073 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2074              	.LVL152:
 2075              		.loc 1 2171 0
 2076 0018 10BD     		pop	{r4, pc}
 2077              		.cfi_endproc
 2078              	.LFE62:
 2080              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2081              		.align	1
 2082              		.global	HAL_ADC_IRQHandler
 2083              		.syntax unified
 2084              		.code	16
 2085              		.thumb_func
 2086              		.fpu softvfp
 2088              	HAL_ADC_IRQHandler:
 2089              	.LFB48:
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2090              		.loc 1 1396 0
 2091              		.cfi_startproc
 2092              		@ args = 0, pretend = 0, frame = 0
 2093              		@ frame_needed = 0, uses_anonymous_args = 0
 2094              	.LVL153:
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2095              		.loc 1 1403 0
 2096 0000 0422     		movs	r2, #4
 2097 0002 0368     		ldr	r3, [r0]
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2098              		.loc 1 1396 0
 2099 0004 70B5     		push	{r4, r5, r6, lr}
 2100              	.LCFI16:
 2101              		.cfi_def_cfa_offset 16
 2102              		.cfi_offset 4, -16
 2103              		.cfi_offset 5, -12
 2104              		.cfi_offset 6, -8
 2105              		.cfi_offset 14, -4
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2106              		.loc 1 1403 0
 2107 0006 1968     		ldr	r1, [r3]
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2108              		.loc 1 1396 0
 2109 0008 0400     		movs	r4, r0
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2110              		.loc 1 1403 0
 2111 000a 1142     		tst	r1, r2
 2112 000c 02D0     		beq	.L201
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2113              		.loc 1 1403 0 is_stmt 0 discriminator 1
 2114 000e 5968     		ldr	r1, [r3, #4]
 2115 0010 1142     		tst	r1, r2
 2116 0012 06D1     		bne	.L202
ARM GAS  /tmp/ccZRAhSM.s 			page 82


 2117              	.L201:
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2118              		.loc 1 1404 0 is_stmt 1 discriminator 3
 2119 0014 0822     		movs	r2, #8
 2120 0016 1968     		ldr	r1, [r3]
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2121              		.loc 1 1403 0 discriminator 3
 2122 0018 1142     		tst	r1, r2
 2123 001a 28D0     		beq	.L203
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2124              		.loc 1 1404 0
 2125 001c 5968     		ldr	r1, [r3, #4]
 2126 001e 1142     		tst	r1, r2
 2127 0020 25D0     		beq	.L203
 2128              	.L202:
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2129              		.loc 1 1407 0
 2130 0022 626C     		ldr	r2, [r4, #68]
 2131 0024 D206     		lsls	r2, r2, #27
 2132 0026 04D4     		bmi	.L204
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2133              		.loc 1 1410 0
 2134 0028 8022     		movs	r2, #128
 2135 002a 616C     		ldr	r1, [r4, #68]
 2136 002c 9200     		lsls	r2, r2, #2
 2137 002e 0A43     		orrs	r2, r1
 2138 0030 6264     		str	r2, [r4, #68]
 2139              	.L204:
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2140              		.loc 1 1415 0
 2141 0032 C022     		movs	r2, #192
 2142 0034 D968     		ldr	r1, [r3, #12]
 2143 0036 1201     		lsls	r2, r2, #4
 2144 0038 1142     		tst	r1, r2
 2145 003a 12D1     		bne	.L205
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2146              		.loc 1 1415 0 is_stmt 0 discriminator 1
 2147 003c 226A     		ldr	r2, [r4, #32]
 2148 003e 002A     		cmp	r2, #0
 2149 0040 0FD1     		bne	.L205
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2150              		.loc 1 1419 0 is_stmt 1
 2151 0042 1A68     		ldr	r2, [r3]
 2152 0044 1207     		lsls	r2, r2, #28
 2153 0046 0CD5     		bpl	.L205
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2154              		.loc 1 1423 0
 2155 0048 9A68     		ldr	r2, [r3, #8]
 2156 004a 5207     		lsls	r2, r2, #29
 2157 004c 3CD4     		bmi	.L206
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2158              		.loc 1 1429 0
 2159 004e 0C21     		movs	r1, #12
 2160 0050 5A68     		ldr	r2, [r3, #4]
 2161 0052 8A43     		bics	r2, r1
 2162 0054 5A60     		str	r2, [r3, #4]
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
ARM GAS  /tmp/ccZRAhSM.s 			page 83


 2163              		.loc 1 1432 0
 2164 0056 636C     		ldr	r3, [r4, #68]
 2165 0058 204A     		ldr	r2, .L241
 2166 005a 1A40     		ands	r2, r3
 2167 005c 0123     		movs	r3, #1
 2168 005e 1343     		orrs	r3, r2
 2169 0060 6364     		str	r3, [r4, #68]
 2170              	.L205:
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2171              		.loc 1 1451 0
 2172 0062 2000     		movs	r0, r4
 2173              	.LVL154:
 2174 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2175              	.LVL155:
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2176              		.loc 1 1459 0
 2177 0068 0C22     		movs	r2, #12
 2178 006a 2368     		ldr	r3, [r4]
 2179 006c 1A60     		str	r2, [r3]
 2180              	.L203:
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2181              		.loc 1 1463 0
 2182 006e 8025     		movs	r5, #128
 2183 0070 2368     		ldr	r3, [r4]
 2184 0072 1A68     		ldr	r2, [r3]
 2185 0074 2A42     		tst	r2, r5
 2186 0076 0CD0     		beq	.L207
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2187              		.loc 1 1463 0 is_stmt 0 discriminator 1
 2188 0078 5B68     		ldr	r3, [r3, #4]
 2189 007a 2B42     		tst	r3, r5
 2190 007c 09D0     		beq	.L207
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2191              		.loc 1 1466 0 is_stmt 1
 2192 007e 8023     		movs	r3, #128
 2193 0080 626C     		ldr	r2, [r4, #68]
 2194 0082 5B02     		lsls	r3, r3, #9
 2195 0084 1343     		orrs	r3, r2
 2196 0086 6364     		str	r3, [r4, #68]
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2197              		.loc 1 1469 0
 2198 0088 2000     		movs	r0, r4
 2199 008a FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2200              	.LVL156:
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
 2201              		.loc 1 1472 0
 2202 008e 2368     		ldr	r3, [r4]
 2203 0090 1D60     		str	r5, [r3]
 2204              	.L207:
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2205              		.loc 1 1478 0
 2206 0092 1022     		movs	r2, #16
 2207 0094 2368     		ldr	r3, [r4]
 2208 0096 1968     		ldr	r1, [r3]
 2209 0098 1142     		tst	r1, r2
 2210 009a 14D0     		beq	.L200
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
ARM GAS  /tmp/ccZRAhSM.s 			page 84


 2211              		.loc 1 1478 0 is_stmt 0 discriminator 1
 2212 009c 5968     		ldr	r1, [r3, #4]
 2213 009e 1142     		tst	r1, r2
 2214 00a0 11D0     		beq	.L200
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2215              		.loc 1 1486 0 is_stmt 1
 2216 00a2 626B     		ldr	r2, [r4, #52]
 2217 00a4 012A     		cmp	r2, #1
 2218 00a6 02D0     		beq	.L209
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2219              		.loc 1 1487 0 discriminator 1
 2220 00a8 DA68     		ldr	r2, [r3, #12]
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2221              		.loc 1 1486 0 discriminator 1
 2222 00aa D207     		lsls	r2, r2, #31
 2223 00ac 08D5     		bpl	.L210
 2224              	.L209:
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2225              		.loc 1 1490 0
 2226 00ae 0222     		movs	r2, #2
 2227 00b0 A16C     		ldr	r1, [r4, #72]
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2228              		.loc 1 1496 0
 2229 00b2 2000     		movs	r0, r4
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2230              		.loc 1 1490 0
 2231 00b4 0A43     		orrs	r2, r1
 2232 00b6 A264     		str	r2, [r4, #72]
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2233              		.loc 1 1493 0
 2234 00b8 1022     		movs	r2, #16
 2235 00ba 1A60     		str	r2, [r3]
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2236              		.loc 1 1496 0
 2237 00bc FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2238              	.LVL157:
 2239              	.L210:
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2240              		.loc 1 1500 0
 2241 00c0 1022     		movs	r2, #16
 2242 00c2 2368     		ldr	r3, [r4]
 2243 00c4 1A60     		str	r2, [r3]
 2244              	.L200:
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2245              		.loc 1 1503 0
 2246              		@ sp needed
 2247              	.LVL158:
 2248 00c6 70BD     		pop	{r4, r5, r6, pc}
 2249              	.LVL159:
 2250              	.L206:
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2251              		.loc 1 1439 0
 2252 00c8 2023     		movs	r3, #32
 2253 00ca 626C     		ldr	r2, [r4, #68]
 2254 00cc 1343     		orrs	r3, r2
 2255 00ce 6364     		str	r3, [r4, #68]
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
ARM GAS  /tmp/ccZRAhSM.s 			page 85


 2256              		.loc 1 1442 0
 2257 00d0 0123     		movs	r3, #1
 2258 00d2 A26C     		ldr	r2, [r4, #72]
 2259 00d4 1343     		orrs	r3, r2
 2260 00d6 A364     		str	r3, [r4, #72]
 2261 00d8 C3E7     		b	.L205
 2262              	.L242:
 2263 00da C046     		.align	2
 2264              	.L241:
 2265 00dc FEFEFFFF 		.word	-258
 2266              		.cfi_endproc
 2267              	.LFE48:
 2269              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2270              		.align	1
 2271              		.global	HAL_ADC_ConfigChannel
 2272              		.syntax unified
 2273              		.code	16
 2274              		.thumb_func
 2275              		.fpu softvfp
 2277              	HAL_ADC_ConfigChannel:
 2278              	.LFB53:
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2279              		.loc 1 1612 0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 8
 2282              		@ frame_needed = 0, uses_anonymous_args = 0
 2283              	.LVL160:
 2284 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 2285              	.LCFI17:
 2286              		.cfi_def_cfa_offset 32
 2287              		.cfi_offset 0, -32
 2288              		.cfi_offset 1, -28
 2289              		.cfi_offset 2, -24
 2290              		.cfi_offset 4, -20
 2291              		.cfi_offset 5, -16
 2292              		.cfi_offset 6, -12
 2293              		.cfi_offset 7, -8
 2294              		.cfi_offset 14, -4
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2295              		.loc 1 1614 0
 2296 0002 0023     		movs	r3, #0
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2297              		.loc 1 1627 0
 2298 0004 0400     		movs	r4, r0
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2299              		.loc 1 1614 0
 2300 0006 0193     		str	r3, [sp, #4]
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2301              		.loc 1 1627 0
 2302 0008 4034     		adds	r4, r4, #64
 2303 000a 2378     		ldrb	r3, [r4]
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2304              		.loc 1 1612 0
 2305 000c 0500     		movs	r5, r0
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2306              		.loc 1 1627 0
 2307 000e 0220     		movs	r0, #2
ARM GAS  /tmp/ccZRAhSM.s 			page 86


 2308              	.LVL161:
 2309 0010 012B     		cmp	r3, #1
 2310 0012 2BD0     		beq	.L244
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2311              		.loc 1 1627 0 is_stmt 0 discriminator 2
 2312 0014 0123     		movs	r3, #1
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2313              		.loc 1 1635 0 is_stmt 1 discriminator 2
 2314 0016 2A68     		ldr	r2, [r5]
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2315              		.loc 1 1621 0 discriminator 2
 2316 0018 AE6B     		ldr	r6, [r5, #56]
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2317              		.loc 1 1635 0 discriminator 2
 2318 001a 9068     		ldr	r0, [r2, #8]
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2319              		.loc 1 1627 0 discriminator 2
 2320 001c 2370     		strb	r3, [r4]
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2321              		.loc 1 1635 0 discriminator 2
 2322 001e 4007     		lsls	r0, r0, #29
 2323 0020 52D4     		bmi	.L245
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2324              		.loc 1 1639 0
 2325 0022 2C48     		ldr	r0, .L260
 2326 0024 4F68     		ldr	r7, [r1, #4]
 2327 0026 0D68     		ldr	r5, [r1]
 2328              	.LVL162:
 2329 0028 8742     		cmp	r7, r0
 2330 002a 3BD0     		beq	.L246
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2331              		.loc 1 1643 0
 2332 002c AB40     		lsls	r3, r3, r5
 2333 002e 1800     		movs	r0, r3
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2334              		.loc 1 1650 0
 2335 0030 8023     		movs	r3, #128
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2336              		.loc 1 1643 0
 2337 0032 976A     		ldr	r7, [r2, #40]
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2338              		.loc 1 1650 0
 2339 0034 5B05     		lsls	r3, r3, #21
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2340              		.loc 1 1643 0
 2341 0036 3843     		orrs	r0, r7
 2342 0038 9062     		str	r0, [r2, #40]
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2343              		.loc 1 1650 0
 2344 003a 9E42     		cmp	r6, r3
 2345 003c 0FD0     		beq	.L247
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2346              		.loc 1 1650 0 is_stmt 0 discriminator 1
 2347 003e 013E     		subs	r6, r6, #1
 2348 0040 062E     		cmp	r6, #6
 2349 0042 0CD9     		bls	.L247
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
ARM GAS  /tmp/ccZRAhSM.s 			page 87


 2350              		.loc 1 1654 0 is_stmt 1
 2351 0044 8B68     		ldr	r3, [r1, #8]
 2352 0046 0721     		movs	r1, #7
 2353              	.LVL163:
 2354 0048 5069     		ldr	r0, [r2, #20]
 2355 004a 0840     		ands	r0, r1
 2356 004c 8342     		cmp	r3, r0
 2357 004e 06D0     		beq	.L247
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2358              		.loc 1 1658 0
 2359 0050 5069     		ldr	r0, [r2, #20]
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 2360              		.loc 1 1661 0
 2361 0052 0B40     		ands	r3, r1
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2362              		.loc 1 1658 0
 2363 0054 8843     		bics	r0, r1
 2364 0056 5061     		str	r0, [r2, #20]
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 2365              		.loc 1 1661 0
 2366 0058 5069     		ldr	r0, [r2, #20]
 2367 005a 0343     		orrs	r3, r0
 2368 005c 5361     		str	r3, [r2, #20]
 2369              	.L247:
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2370              		.loc 1 1671 0
 2371 005e 2B00     		movs	r3, r5
 2372 0060 103B     		subs	r3, r3, #16
 2373 0062 012B     		cmp	r3, #1
 2374 0064 03D9     		bls	.L248
 2375              	.L259:
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2376              		.loc 1 1613 0 discriminator 4
 2377 0066 0020     		movs	r0, #0
 2378              	.LVL164:
 2379              	.L249:
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2380              		.loc 1 1723 0
 2381 0068 0023     		movs	r3, #0
 2382 006a 2370     		strb	r3, [r4]
 2383              	.LVL165:
 2384              	.L244:
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2385              		.loc 1 1727 0
 2386              		@ sp needed
 2387              	.LVL166:
 2388 006c FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 2389              	.LVL167:
 2390              	.L248:
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2391              		.loc 1 1676 0
 2392 006e 1A4B     		ldr	r3, .L260+4
 2393 0070 8022     		movs	r2, #128
 2394 0072 1968     		ldr	r1, [r3]
 2395 0074 102D     		cmp	r5, #16
 2396 0076 13D0     		beq	.L256
 2397 0078 D203     		lsls	r2, r2, #15
ARM GAS  /tmp/ccZRAhSM.s 			page 88


 2398              	.L250:
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2399              		.loc 1 1676 0 is_stmt 0 discriminator 4
 2400 007a 0A43     		orrs	r2, r1
 2401 007c 1A60     		str	r2, [r3]
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2402              		.loc 1 1679 0 is_stmt 1 discriminator 4
 2403 007e 102D     		cmp	r5, #16
 2404 0080 F1D1     		bne	.L259
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2405              		.loc 1 1683 0
 2406 0082 164B     		ldr	r3, .L260+8
 2407 0084 1649     		ldr	r1, .L260+12
 2408 0086 1868     		ldr	r0, [r3]
 2409 0088 FFF7FEFF 		bl	__aeabi_uidiv
 2410              	.LVL168:
 2411 008c 0A23     		movs	r3, #10
 2412 008e 5843     		muls	r0, r3
 2413 0090 0190     		str	r0, [sp, #4]
 2414              	.L252:
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
 2415              		.loc 1 1684 0
 2416 0092 019B     		ldr	r3, [sp, #4]
 2417 0094 002B     		cmp	r3, #0
 2418 0096 E6D0     		beq	.L259
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
 2419              		.loc 1 1686 0
 2420 0098 019B     		ldr	r3, [sp, #4]
 2421 009a 013B     		subs	r3, r3, #1
 2422 009c 0193     		str	r3, [sp, #4]
 2423 009e F8E7     		b	.L252
 2424              	.L256:
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2425              		.loc 1 1676 0
 2426 00a0 1204     		lsls	r2, r2, #16
 2427 00a2 EAE7     		b	.L250
 2428              	.LVL169:
 2429              	.L246:
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2430              		.loc 1 1695 0
 2431 00a4 AB40     		lsls	r3, r3, r5
 2432 00a6 916A     		ldr	r1, [r2, #40]
 2433              	.LVL170:
 2434 00a8 9943     		bics	r1, r3
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2435              		.loc 1 1700 0
 2436 00aa 2B00     		movs	r3, r5
 2437 00ac 103B     		subs	r3, r3, #16
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2438              		.loc 1 1695 0
 2439 00ae 9162     		str	r1, [r2, #40]
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2440              		.loc 1 1700 0
 2441 00b0 012B     		cmp	r3, #1
 2442 00b2 D8D8     		bhi	.L259
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2443              		.loc 1 1705 0
ARM GAS  /tmp/ccZRAhSM.s 			page 89


 2444 00b4 084B     		ldr	r3, .L260+4
 2445 00b6 1A68     		ldr	r2, [r3]
 2446 00b8 102D     		cmp	r5, #16
 2447 00ba 03D0     		beq	.L257
 2448 00bc 0949     		ldr	r1, .L260+16
 2449              	.L254:
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2450              		.loc 1 1705 0 is_stmt 0 discriminator 4
 2451 00be 0A40     		ands	r2, r1
 2452 00c0 1A60     		str	r2, [r3]
 2453 00c2 D0E7     		b	.L259
 2454              	.L257:
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2455              		.loc 1 1705 0
 2456 00c4 0849     		ldr	r1, .L260+20
 2457 00c6 FAE7     		b	.L254
 2458              	.LVL171:
 2459              	.L245:
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2460              		.loc 1 1717 0 is_stmt 1
 2461 00c8 2022     		movs	r2, #32
 2462 00ca 696C     		ldr	r1, [r5, #68]
 2463              	.LVL172:
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2464              		.loc 1 1719 0
 2465 00cc 1800     		movs	r0, r3
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2466              		.loc 1 1717 0
 2467 00ce 0A43     		orrs	r2, r1
 2468 00d0 6A64     		str	r2, [r5, #68]
 2469              	.LVL173:
 2470 00d2 C9E7     		b	.L249
 2471              	.L261:
 2472              		.align	2
 2473              	.L260:
 2474 00d4 01100000 		.word	4097
 2475 00d8 08270140 		.word	1073817352
 2476 00dc 00000000 		.word	SystemCoreClock
 2477 00e0 40420F00 		.word	1000000
 2478 00e4 FFFFBFFF 		.word	-4194305
 2479 00e8 FFFF7FFF 		.word	-8388609
 2480              		.cfi_endproc
 2481              	.LFE53:
 2483              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2484              		.align	1
 2485              		.global	HAL_ADC_AnalogWDGConfig
 2486              		.syntax unified
 2487              		.code	16
 2488              		.thumb_func
 2489              		.fpu softvfp
 2491              	HAL_ADC_AnalogWDGConfig:
 2492              	.LFB54:
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2493              		.loc 1 1745 0
 2494              		.cfi_startproc
 2495              		@ args = 0, pretend = 0, frame = 0
 2496              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZRAhSM.s 			page 90


 2497              	.LVL174:
 2498 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2499              	.LCFI18:
 2500              		.cfi_def_cfa_offset 20
 2501              		.cfi_offset 4, -20
 2502              		.cfi_offset 5, -16
 2503              		.cfi_offset 6, -12
 2504              		.cfi_offset 7, -8
 2505              		.cfi_offset 14, -4
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2506              		.loc 1 1766 0
 2507 0002 0500     		movs	r5, r0
 2508 0004 4035     		adds	r5, r5, #64
 2509 0006 2B78     		ldrb	r3, [r5]
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2510              		.loc 1 1745 0
 2511 0008 0400     		movs	r4, r0
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2512              		.loc 1 1766 0
 2513 000a 0220     		movs	r0, #2
 2514              	.LVL175:
 2515 000c 012B     		cmp	r3, #1
 2516 000e 33D0     		beq	.L263
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2517              		.loc 1 1766 0 is_stmt 0 discriminator 2
 2518 0010 0122     		movs	r2, #1
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2519              		.loc 1 1773 0 is_stmt 1 discriminator 2
 2520 0012 2368     		ldr	r3, [r4]
 2521 0014 0018     		adds	r0, r0, r0
 2522 0016 9F68     		ldr	r7, [r3, #8]
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2523              		.loc 1 1760 0 discriminator 2
 2524 0018 0E68     		ldr	r6, [r1]
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2525              		.loc 1 1773 0 discriminator 2
 2526 001a 3840     		ands	r0, r7
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2527              		.loc 1 1766 0 discriminator 2
 2528 001c 2A70     		strb	r2, [r5]
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2529              		.loc 1 1773 0 discriminator 2
 2530 001e 30D1     		bne	.L264
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
 2531              		.loc 1 1780 0
 2532 0020 DA68     		ldr	r2, [r3, #12]
 2533 0022 1B4C     		ldr	r4, .L269
 2534              	.LVL176:
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2535              		.loc 1 1793 0
 2536 0024 1B4F     		ldr	r7, .L269+4
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
 2537              		.loc 1 1780 0
 2538 0026 2240     		ands	r2, r4
 2539 0028 DA60     		str	r2, [r3, #12]
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2540              		.loc 1 1784 0
ARM GAS  /tmp/ccZRAhSM.s 			page 91


 2541 002a DC68     		ldr	r4, [r3, #12]
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2542              		.loc 1 1785 0
 2543 002c 4A68     		ldr	r2, [r1, #4]
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2544              		.loc 1 1784 0
 2545 002e 3443     		orrs	r4, r6
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2546              		.loc 1 1789 0
 2547 0030 0326     		movs	r6, #3
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2548              		.loc 1 1785 0
 2549 0032 9206     		lsls	r2, r2, #26
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2550              		.loc 1 1784 0
 2551 0034 2243     		orrs	r2, r4
 2552 0036 DA60     		str	r2, [r3, #12]
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2553              		.loc 1 1789 0
 2554 0038 DA68     		ldr	r2, [r3, #12]
 2555 003a CC68     		ldr	r4, [r1, #12]
 2556 003c D208     		lsrs	r2, r2, #3
 2557 003e 3240     		ands	r2, r6
 2558 0040 5200     		lsls	r2, r2, #1
 2559 0042 9440     		lsls	r4, r4, r2
 2560 0044 2200     		movs	r2, r4
 2561              	.LVL177:
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2562              		.loc 1 1790 0
 2563 0046 DC68     		ldr	r4, [r3, #12]
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
 2564              		.loc 1 1794 0
 2565 0048 1204     		lsls	r2, r2, #16
 2566              	.LVL178:
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2567              		.loc 1 1790 0
 2568 004a F440     		lsrs	r4, r4, r6
 2569 004c 3440     		ands	r4, r6
 2570 004e 0E69     		ldr	r6, [r1, #16]
 2571 0050 6400     		lsls	r4, r4, #1
 2572 0052 A640     		lsls	r6, r6, r4
 2573 0054 3400     		movs	r4, r6
 2574              	.LVL179:
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2575              		.loc 1 1793 0
 2576 0056 1E6A     		ldr	r6, [r3, #32]
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2577              		.loc 1 1803 0
 2578 0058 8968     		ldr	r1, [r1, #8]
 2579              	.LVL180:
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2580              		.loc 1 1793 0
 2581 005a 3E40     		ands	r6, r7
 2582 005c 1E62     		str	r6, [r3, #32]
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
 2583              		.loc 1 1794 0
 2584 005e 1E6A     		ldr	r6, [r3, #32]
ARM GAS  /tmp/ccZRAhSM.s 			page 92


 2585 0060 3443     		orrs	r4, r6
 2586              	.LVL181:
 2587 0062 2243     		orrs	r2, r4
 2588 0064 1A62     		str	r2, [r3, #32]
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2589              		.loc 1 1800 0
 2590 0066 8022     		movs	r2, #128
 2591 0068 1A60     		str	r2, [r3]
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2592              		.loc 1 1803 0
 2593 006a 0129     		cmp	r1, #1
 2594 006c 05D1     		bne	.L265
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2595              		.loc 1 1806 0
 2596 006e 5968     		ldr	r1, [r3, #4]
 2597 0070 0A43     		orrs	r2, r1
 2598 0072 5A60     		str	r2, [r3, #4]
 2599              	.LVL182:
 2600              	.L266:
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2601              		.loc 1 1827 0
 2602 0074 0023     		movs	r3, #0
 2603 0076 2B70     		strb	r3, [r5]
 2604              	.LVL183:
 2605              	.L263:
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2606              		.loc 1 1831 0
 2607              		@ sp needed
 2608              	.LVL184:
 2609 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 2610              	.LVL185:
 2611              	.L265:
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2612              		.loc 1 1811 0
 2613 007a 5968     		ldr	r1, [r3, #4]
 2614 007c 9143     		bics	r1, r2
 2615 007e 5960     		str	r1, [r3, #4]
 2616 0080 F8E7     		b	.L266
 2617              	.LVL186:
 2618              	.L264:
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2619              		.loc 1 1820 0
 2620 0082 2023     		movs	r3, #32
 2621 0084 616C     		ldr	r1, [r4, #68]
 2622              	.LVL187:
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2623              		.loc 1 1822 0
 2624 0086 1000     		movs	r0, r2
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2625              		.loc 1 1820 0
 2626 0088 0B43     		orrs	r3, r1
 2627 008a 6364     		str	r3, [r4, #68]
 2628              	.LVL188:
 2629 008c F2E7     		b	.L266
 2630              	.L270:
 2631 008e C046     		.align	2
 2632              	.L269:
ARM GAS  /tmp/ccZRAhSM.s 			page 93


 2633 0090 FFFF3F83 		.word	-2092957697
 2634 0094 00F000F0 		.word	-268374016
 2635              		.cfi_endproc
 2636              	.LFE54:
 2638              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2639              		.align	1
 2640              		.global	HAL_ADC_GetState
 2641              		.syntax unified
 2642              		.code	16
 2643              		.thumb_func
 2644              		.fpu softvfp
 2646              	HAL_ADC_GetState:
 2647              	.LFB55:
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2648              		.loc 1 1867 0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 0
 2651              		@ frame_needed = 0, uses_anonymous_args = 0
 2652              		@ link register save eliminated.
 2653              	.LVL189:
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2654              		.loc 1 1872 0
 2655 0000 406C     		ldr	r0, [r0, #68]
 2656              	.LVL190:
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2657              		.loc 1 1873 0
 2658              		@ sp needed
 2659 0002 7047     		bx	lr
 2660              		.cfi_endproc
 2661              	.LFE55:
 2663              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2664              		.align	1
 2665              		.global	HAL_ADC_GetError
 2666              		.syntax unified
 2667              		.code	16
 2668              		.thumb_func
 2669              		.fpu softvfp
 2671              	HAL_ADC_GetError:
 2672              	.LFB56:
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
 2673              		.loc 1 1881 0
 2674              		.cfi_startproc
 2675              		@ args = 0, pretend = 0, frame = 0
 2676              		@ frame_needed = 0, uses_anonymous_args = 0
 2677              		@ link register save eliminated.
 2678              	.LVL191:
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2679              		.loc 1 1882 0
 2680 0000 806C     		ldr	r0, [r0, #72]
 2681              	.LVL192:
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2682              		.loc 1 1883 0
 2683              		@ sp needed
 2684 0002 7047     		bx	lr
 2685              		.cfi_endproc
 2686              	.LFE56:
 2688              		.text
ARM GAS  /tmp/ccZRAhSM.s 			page 94


 2689              	.Letext0:
 2690              		.file 2 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machin
 2691              		.file 3 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_s
 2692              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2693              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 2694              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2695              		.file 7 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lo
 2696              		.file 8 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_t
 2697              		.file 9 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/
 2698              		.file 10 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/r
 2699              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2700              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2701              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2702              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccZRAhSM.s 			page 95


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_adc.c
     /tmp/ccZRAhSM.s:16     .text.ADC_Disable:0000000000000000 $t
     /tmp/ccZRAhSM.s:22     .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccZRAhSM.s:135    .text.ADC_Enable:0000000000000000 $t
     /tmp/ccZRAhSM.s:141    .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccZRAhSM.s:277    .text.ADC_Enable:000000000000008c $d
     /tmp/ccZRAhSM.s:284    .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccZRAhSM.s:290    .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccZRAhSM.s:384    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccZRAhSM.s:391    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccZRAhSM.s:403    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccZRAhSM.s:410    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccZRAhSM.s:682    .text.HAL_ADC_Init:0000000000000140 $d
     /tmp/ccZRAhSM.s:689    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccZRAhSM.s:696    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccZRAhSM.s:708    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccZRAhSM.s:715    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccZRAhSM.s:846    .text.HAL_ADC_DeInit:0000000000000088 $d
     /tmp/ccZRAhSM.s:854    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccZRAhSM.s:861    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccZRAhSM.s:948    .text.HAL_ADC_Start:0000000000000054 $d
     /tmp/ccZRAhSM.s:953    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccZRAhSM.s:960    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccZRAhSM.s:1026   .text.HAL_ADC_Stop:0000000000000038 $d
     /tmp/ccZRAhSM.s:1031   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccZRAhSM.s:1038   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccZRAhSM.s:1200   .text.HAL_ADC_PollForConversion:00000000000000b8 $d
     /tmp/ccZRAhSM.s:1205   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccZRAhSM.s:1212   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccZRAhSM.s:1324   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccZRAhSM.s:1331   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccZRAhSM.s:1440   .text.HAL_ADC_Start_IT:0000000000000070 $d
     /tmp/ccZRAhSM.s:1445   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccZRAhSM.s:1452   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccZRAhSM.s:1526   .text.HAL_ADC_Stop_IT:0000000000000044 $d
     /tmp/ccZRAhSM.s:1531   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccZRAhSM.s:1538   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccZRAhSM.s:1660   .text.HAL_ADC_Start_DMA:0000000000000084 $d
     /tmp/ccZRAhSM.s:1843   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccZRAhSM.s:1970   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccZRAhSM.s:2042   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccZRAhSM.s:1668   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccZRAhSM.s:1675   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccZRAhSM.s:1785   .text.HAL_ADC_Stop_DMA:000000000000006c $d
     /tmp/ccZRAhSM.s:1790   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccZRAhSM.s:1797   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccZRAhSM.s:1818   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccZRAhSM.s:1825   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccZRAhSM.s:1837   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccZRAhSM.s:1940   .text.ADC_DMAConvCplt:000000000000006c $d
     /tmp/ccZRAhSM.s:1945   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccZRAhSM.s:1952   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccZRAhSM.s:1964   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccZRAhSM.s:1995   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccZRAhSM.s:2002   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccZRAhSM.s:2014   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
ARM GAS  /tmp/ccZRAhSM.s 			page 96


     /tmp/ccZRAhSM.s:2021   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccZRAhSM.s:2036   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccZRAhSM.s:2081   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccZRAhSM.s:2088   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccZRAhSM.s:2265   .text.HAL_ADC_IRQHandler:00000000000000dc $d
     /tmp/ccZRAhSM.s:2270   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccZRAhSM.s:2277   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccZRAhSM.s:2474   .text.HAL_ADC_ConfigChannel:00000000000000d4 $d
     /tmp/ccZRAhSM.s:2484   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccZRAhSM.s:2491   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccZRAhSM.s:2633   .text.HAL_ADC_AnalogWDGConfig:0000000000000090 $d
     /tmp/ccZRAhSM.s:2639   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccZRAhSM.s:2646   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccZRAhSM.s:2664   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccZRAhSM.s:2671   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
__aeabi_uidiv
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
